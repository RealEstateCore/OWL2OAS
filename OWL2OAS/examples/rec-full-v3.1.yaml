openapi: 3.0.2
info:
  title: RealEstateCore Full
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: The documentation below is automatically extracted from a <dc:description> annotation on the ontology https://w3id.org/rec/full/:<br/><br/>*This ontology imports all RealEstateCore (REC) modules and thus gives the fullest expressivity that REC allows. You can use this ontology as-is, or you can construct your own ontology by importing individual REC modules.*
  version: "3.1"
components:
  parameters:
    offsetParam:
      name: offset
      description: Number of items to skip before returning the results.
      schema:
        type: integer
        format: int32
        default: 0
      in: query
    limitParam:
      name: limit
      description: Maximum number of items to return.
      schema:
        type: integer
        format: int32
        maximum: 100
        default: 20
      in: query
    sortParam:
      name: sort
      description: The field and direction to sort results on.
      schema:
        $ref: '#/components/schemas/SortingSchema'
      style: deepObject
      in: query
  schemas:
    HydraCollectionWrapper:
      type: object
      required:
      - '@context'
      - '@type'
      - member
      properties:
        '@context':
          type: string
          format: uri
          default: http://www.w3.org/ns/hydra/context.jsonld
        '@type':
          type: string
          default: Collection
        totalItems:
          type: integer
    IntegerFilter:
      type: object
      properties:
        eq:
          type: integer
        lt:
          type: integer
        lte:
          type: integer
        gt:
          type: integer
        gte:
          type: integer
    NumberFilter:
      type: object
      properties:
        eq:
          type: number
        lt:
          type: number
        lte:
          type: number
        gt:
          type: number
        gte:
          type: number
    StringFilter:
      type: object
      properties:
        eq:
          type: string
        contains:
          type: string
        regex:
          type: string
    DateTimeFilter:
      type: object
      properties:
        eq:
          type: string
          format: date-time
        starting:
          type: string
          format: date-time
        ending:
          type: string
          format: date-time
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        latest:
          type: boolean
    SortingSchema:
      type: object
      properties:
        asc:
          type: string
        desc:
          type: string
    Context:
      type: object
      required:
      - '@vocab'
      - '@base'
      - label
      - actuation
      - agents
      - building
      - core
      - device
      - lease
      - metadata
      properties:
        '@vocab':
          type: string
          format: uri
          default: https://w3id.org/rec/full/
        '@base':
          type: string
          format: uri
        label:
          type: string
          format: uri
          default: http://www.w3.org/2000/01/rdf-schema#label
        actuation:
          type: string
          format: uri
          default: https://w3id.org/rec/actuation/
        agents:
          type: string
          format: uri
          default: https://w3id.org/rec/agents/
        building:
          type: string
          format: uri
          default: https://w3id.org/rec/building/
        core:
          type: string
          format: uri
          default: https://w3id.org/rec/core/
        device:
          type: string
          format: uri
          default: https://w3id.org/rec/device/
        lease:
          type: string
          format: uri
          default: https://w3id.org/rec/lease/
        metadata:
          type: string
          format: uri
          default: https://w3id.org/rec/metadata/
    actuation:ActuationCommand:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ActuationCommand
        label:
          type: string
        actuation:hasCommandResponse:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationCommandResponse
        actuation:wasGeneratedFromRequest:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationRequest
        actuation:requestingAgent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Agent
        actuation:targetActuator:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Actuator
        actuation:actuationPayload:
          type: string
    actuation:ActuationCommandResponse:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ActuationCommandResponse
        label:
          type: string
        actuation:responseCode:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ResponseCode
        actuation:responseToCommand:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationCommand
    actuation:ActuationEvent:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ActuationEvent
        label:
          type: string
    actuation:ActuationInterface:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ActuationInterface
        label:
          type: string
        actuation:isActuationInterfaceOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Actuator
        actuation:isDefaultActuationInterfaceOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Actuator
        actuation:payloadKeyValueDefinition:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:KeyValueDefinition
    actuation:ActuationRequest:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ActuationRequest
        label:
          type: string
        actuation:generatedCommand:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationCommand
        actuation:hasRequestResponse:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationRequestResponse
        actuation:targetInterface:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationInterface
        actuation:requestingAgent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Agent
        actuation:targetActuator:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Actuator
        actuation:actuationPayload:
          type: string
    actuation:ActuationRequestResponse:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ActuationRequestResponse
        label:
          type: string
        actuation:actuationObservedBy:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Sensor
        actuation:generatedCommandResponse:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationCommandResponse
        actuation:responseToRequest:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ActuationRequest
        actuation:requestAccepted:
          type: boolean
    actuation:KeyValueDefinition:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:KeyValueDefinition
        label:
          type: string
        actuation:valueRestriction:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: actuation:ValueRestriction
        actuation:keyMandatory:
          type: boolean
        actuation:keyString:
          type: string
        actuation:valueDatatype:
          type: string
    actuation:ResponseCode:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ResponseCode
        label:
          type: string
        actuation:responseCodeInteger:
          type: integer
          format: int32
        actuation:responseCodeString:
          type: string
    actuation:ValueRestriction:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: actuation:ValueRestriction
        label:
          type: string
        actuation:valueRestrictionResolution:
          type: number
          format: float
        actuation:valueRestrictionType:
          type: string
    device:Actuator:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:Actuator
        label:
          type: string
        device:devicePlacementContext:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:PlacementContext
        device:hasCommunicationsBus:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:CommunicationsBus
        device:hasDeviceFunctionType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:DeviceFunctionType
        device:hasKNXDataPointType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:KNXDataPointType
        device:hasModbusDataType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:ModbusDataType
        device:hasModbusFunctionCode:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:ModbusFunctionCode
        device:hasIPAddressPort:
          type: integer
          format: int32
        device:hasKNXDeviceId:
          type: string
        device:hasKNXDevicePort:
          type: integer
          format: int32
        device:hasLoraDevEUI:
          type: integer
          format: int32
        device:hasModbusNodeId:
          type: integer
          format: int32
        device:hasModbusRegister:
          type: integer
          format: int32
        device:hasOffset:
          type: number
          format: double
        device:hasScaleFactor:
          type: number
          format: double
        device:observedBy:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Sensor
    device:BACnetConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:BACnetConfiguration
        label:
          type: string
    device:CommunicationConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:CommunicationConfiguration
        label:
          type: string
    device:CommunicationsBus:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:CommunicationsBus
        label:
          type: string
    device:DeviceEvents:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:DeviceEvents
        label:
          type: string
        device:eventPlacementContext:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:PlacementContext
    device:DeviceFunctionType:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:DeviceFunctionType
        label:
          type: string
    device:Exception:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:Exception
        label:
          type: string
        device:exceptionGeneratedBy:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Sensor
        device:eventPlacementContext:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:PlacementContext
    device:KNXConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:KNXConfiguration
        label:
          type: string
    device:KNXDataPointType:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:KNXDataPointType
        label:
          type: string
    device:LoRaConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:LoRaConfiguration
        label:
          type: string
    device:MBusConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:MBusConfiguration
        label:
          type: string
    device:ModbusConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:ModbusConfiguration
        label:
          type: string
    device:ModbusDataType:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:ModbusDataType
        label:
          type: string
    device:ModbusFunctionCode:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:ModbusFunctionCode
        label:
          type: string
    device:ModbusRTUConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:ModbusRTUConfiguration
        label:
          type: string
    device:ModbusTCPConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:ModbusTCPConfiguration
        label:
          type: string
    device:OPC-DAConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:OPC-DAConfiguration
        label:
          type: string
    device:OPC-UAConfiguration:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:OPC-UAConfiguration
        label:
          type: string
    device:Observation:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:Observation
        label:
          type: string
        device:observationGeneratedBy:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Sensor
        device:hasProcessedTime:
          type: string
          format: date-time
        device:eventPlacementContext:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:PlacementContext
    device:PlacementContext:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:PlacementContext
        label:
          type: string
    device:PowerSource:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:PowerSource
        label:
          type: string
        device:devicePlacementContext:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:PlacementContext
        device:hasCommunicationsBus:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:CommunicationsBus
        device:hasDeviceFunctionType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:DeviceFunctionType
        device:hasKNXDataPointType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:KNXDataPointType
        device:hasModbusDataType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:ModbusDataType
        device:hasModbusFunctionCode:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:ModbusFunctionCode
        device:hasIPAddressPort:
          type: integer
          format: int32
        device:hasKNXDeviceId:
          type: string
        device:hasKNXDevicePort:
          type: integer
          format: int32
        device:hasLoraDevEUI:
          type: integer
          format: int32
        device:hasModbusNodeId:
          type: integer
          format: int32
        device:hasModbusRegister:
          type: integer
          format: int32
        device:hasOffset:
          type: number
          format: double
        device:hasScaleFactor:
          type: number
          format: double
    device:Sensor:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: device:Sensor
        label:
          type: string
        device:generatedException:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Exception
        device:generatedObservation:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Observation
        device:observesActuator:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:Actuator
        device:devicePlacementContext:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:PlacementContext
        device:hasCommunicationsBus:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:CommunicationsBus
        device:hasDeviceFunctionType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:DeviceFunctionType
        device:hasKNXDataPointType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:KNXDataPointType
        device:hasModbusDataType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:ModbusDataType
        device:hasModbusFunctionCode:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: device:ModbusFunctionCode
        device:hasIPAddressPort:
          type: integer
          format: int32
        device:hasKNXDeviceId:
          type: string
        device:hasKNXDevicePort:
          type: integer
          format: int32
        device:hasLoraDevEUI:
          type: integer
          format: int32
        device:hasModbusNodeId:
          type: integer
          format: int32
        device:hasModbusRegister:
          type: integer
          format: int32
        device:hasOffset:
          type: number
          format: double
        device:hasScaleFactor:
          type: number
          format: double
    core:Geometry:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: http://www.opengis.net/ont/geosparql#Geometry
        label:
          type: string
        core:asGML:
          type: string
        core:asWKT:
          type: string
        core:hasSerialization:
          type: string
    core:Agent:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Agent
        label:
          type: string
    core:Building:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Building
        label:
          type: string
        core:hasBuildingComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:BuildingComponent
        core:hasGeoReferenceOrigo:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:GeoReferenceOrigo
        core:isPartOfRealEstate:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:RealEstate
    core:BuildingComponent:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:BuildingComponent
        label:
          type: string
        core:containsMountedDevice:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Device
        core:hasSubBuildingComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:BuildingComponent
        core:hasSuperBuildingComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:BuildingComponent
        core:isPartOfBuilding:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Building
    core:Device:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Device
        label:
          type: string
        core:associatedWithEvent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Event
        core:deviceMeasurementUnit:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:MeasurementUnit
        core:deviceQuantityKind:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:QuantityKind
        core:hasSubDevice:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Device
        core:hasSuperDevice:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Device
        core:isMountedInBuildingComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:BuildingComponent
        core:servesBuilding:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Building
        core:servesBuildingComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:BuildingComponent
        core:servesDevice:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Device
    core:Event:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Event
        label:
          type: string
        core:associatedWithDevice:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Device
        core:eventMeasurementUnit:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:MeasurementUnit
        core:eventQuantityKind:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:QuantityKind
        core:hasCreatedTime:
          type: string
          format: date-time
        core:hasDeletedTime:
          type: string
          format: date-time
        core:hasDuration:
          type: number
          format: double
        core:hasObservationTime:
          type: string
          format: date-time
        core:hasPointInTime:
          type: string
          format: date-time
        core:hasReadTime:
          type: string
          format: date-time
        core:hasStartTime:
          type: string
          format: date-time
        core:hasStopTime:
          type: string
          format: date-time
        core:hasUpdatedTime:
          type: string
          format: date-time
    core:GeoReferenceOrigo:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:GeoReferenceOrigo
        label:
          type: string
        core:hasGeoReferenceBearing:
          type: number
          format: double
        core:asGML:
          type: string
        core:asWKT:
          type: string
        core:hasSerialization:
          type: string
    core:Information:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Information
        label:
          type: string
    core:Land:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Land
        label:
          type: string
        core:isPartOfRealEstate:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:RealEstate
    core:MeasurementUnit:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:MeasurementUnit
        label:
          type: string
    core:QuantityKind:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:QuantityKind
        label:
          type: string
        core:qkMeasurementUnit:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:MeasurementUnit
    core:RealEstate:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:RealEstate
        label:
          type: string
        core:hasRealEstateComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:RealEstateComponent
    core:RealEstateComponent:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:RealEstateComponent
        label:
          type: string
        core:isPartOfRealEstate:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:RealEstate
    core:Room:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Room
        label:
          type: string
        core:containsMountedDevice:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Device
        core:hasSubBuildingComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:BuildingComponent
        core:hasSuperBuildingComponent:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:BuildingComponent
        core:isPartOfBuilding:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Building
    core:Software:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Software
        label:
          type: string
    agents:Group:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: agents:Group
        label:
          type: string
        agents:hasMember:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Agent
    agents:Organization:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: agents:Organization
        label:
          type: string
    agents:Person:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: agents:Person
        label:
          type: string
    building:Balcony:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:Balcony
        label:
          type: string
    building:Facade:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:Facade
        label:
          type: string
    building:Floor:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:Floor
        label:
          type: string
    building:RoofInner:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:RoofInner
        label:
          type: string
    building:RoofOuter:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:RoofOuter
        label:
          type: string
    building:RoomType:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:RoomType
        label:
          type: string
    building:Slab:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:Slab
        label:
          type: string
    building:Storey:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:Storey
        label:
          type: string
    building:Terrace:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:Terrace
        label:
          type: string
    building:VirtualBuilding:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:VirtualBuilding
        label:
          type: string
    building:VirtualBuildingComponent:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:VirtualBuildingComponent
        label:
          type: string
    building:Wall:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:Wall
        label:
          type: string
    building:WallInner:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: building:WallInner
        label:
          type: string
    building:Room:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: core:Room
        label:
          type: string
        building:roomType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: building:RoomType
    lease:Leasable:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: lease:Leasable
        label:
          type: string
    lease:Lease:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: lease:Lease
        label:
          type: string
        lease:leaseOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: lease:Leasable
        lease:leasee:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Agent
        lease:leasor:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Agent
        lease:regulatedBy:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: lease:LeaseContract
        lease:leaseEnd:
          type: string
          format: date-time
        lease:leaseStart:
          type: string
          format: date-time
    lease:LeaseContract:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: lease:LeaseContract
        label:
          type: string
    lease:Premises:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: lease:Premises
        label:
          type: string
        lease:premisesIncludesBuilding:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Building
        lease:premisesIncludesRoom:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: core:Room
        lease:premisesType:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: lease:PremisesType
    lease:PremisesType:
      type: object
      required:
      - '@context'
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@id':
          type: string
        '@type':
          type: string
          default: lease:PremisesType
        label:
          type: string
paths:
  /LoadedOntologies:
    get:
      summary: Get the set of ontologies that were imported by the root ontology when the API was generated.
      parameters: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                - actuation
                - device
                - core
                - metadata
                - agents
                - building
                - lease
                properties:
                  actuation:
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/actuation/3.1/
                  device:
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/device/3.1/
                  core:
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/core/3.1/
                  metadata:
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/metadata/3.1/
                  agents:
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/agents/3.1/
                  building:
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/building/3.1/
                  lease:
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/lease/3.1/
          description: A list of ontologies used to generate this API. Note that while the prefix names used here correspond with the ones given in the JSON-LD @context for the supported data types, the prefix mapping in the API is based on the Ontology IRIs given in those @context blocks, which may differ from the values given here (which give priority to version IRIs).
      tags: []
  /actuation:ActuationCommand:
    get:
      summary: Get 'actuation:ActuationCommand' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:hasCommandResponse
        description: Filter value on property 'actuation:hasCommandResponse'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:wasGeneratedFromRequest
        description: Filter value on property 'actuation:wasGeneratedFromRequest'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:requestingAgent
        description: Filter value on property 'actuation:requestingAgent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:targetActuator
        description: Filter value on property 'actuation:targetActuator'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:actuationPayload
        description: Filter value on property 'actuation:actuationPayload'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        allOf:
                        - $ref: '#/components/schemas/actuation%3aActuationCommand'
                        - type: object
                          required:
                          - actuation:wasGeneratedFromRequest
                          - actuation:requestingAgent
                          - actuation:actuationPayload
          description: An array of 'actuation:ActuationCommand' objects.
      tags:
      - actuation:ActuationCommand
    post:
      summary: Create a new 'actuation:ActuationCommand' object.
      parameters:
      - name: entity
        description: New 'actuation:ActuationCommand' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationCommand'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommand'
                - type: object
                  required:
                  - actuation:wasGeneratedFromRequest
                  - actuation:requestingAgent
                  - actuation:actuationPayload
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ActuationCommand
  /actuation:ActuationCommand/{id}:
    get:
      summary: Get a specific 'actuation:ActuationCommand' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommand' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationCommand' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommand'
                - type: object
                  required:
                  - actuation:wasGeneratedFromRequest
                  - actuation:requestingAgent
                  - actuation:actuationPayload
          description: A 'actuation:ActuationCommand' object.
      tags:
      - actuation:ActuationCommand
    put:
      summary: Update an existing 'actuation:ActuationCommand' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommand' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ActuationCommand' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationCommand'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationCommand' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommand'
                - type: object
                  required:
                  - actuation:wasGeneratedFromRequest
                  - actuation:requestingAgent
                  - actuation:actuationPayload
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationCommand
    patch:
      summary: Update a single property on a specific 'actuation:ActuationCommand' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommand' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aActuationCommand'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationCommand' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommand'
                - type: object
                  required:
                  - actuation:wasGeneratedFromRequest
                  - actuation:requestingAgent
                  - actuation:actuationPayload
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationCommand
    delete:
      summary: Delete a 'actuation:ActuationCommand' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommand' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationCommand' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ActuationCommand' entity was successfully deleted."
      tags:
      - actuation:ActuationCommand
  /actuation:ActuationCommandResponse:
    get:
      summary: Get 'actuation:ActuationCommandResponse' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:responseCode
        description: Filter value on property 'actuation:responseCode'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:responseToCommand
        description: Filter value on property 'actuation:responseToCommand'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        allOf:
                        - $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
                        - type: object
                          required:
                          - actuation:responseCode
                          - actuation:responseToCommand
          description: An array of 'actuation:ActuationCommandResponse' objects.
      tags:
      - actuation:ActuationCommandResponse
    post:
      summary: Create a new 'actuation:ActuationCommandResponse' object.
      parameters:
      - name: entity
        description: New 'actuation:ActuationCommandResponse' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
                - type: object
                  required:
                  - actuation:responseCode
                  - actuation:responseToCommand
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ActuationCommandResponse
  /actuation:ActuationCommandResponse/{id}:
    get:
      summary: Get a specific 'actuation:ActuationCommandResponse' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommandResponse' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationCommandResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
                - type: object
                  required:
                  - actuation:responseCode
                  - actuation:responseToCommand
          description: A 'actuation:ActuationCommandResponse' object.
      tags:
      - actuation:ActuationCommandResponse
    put:
      summary: Update an existing 'actuation:ActuationCommandResponse' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommandResponse' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ActuationCommandResponse' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationCommandResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
                - type: object
                  required:
                  - actuation:responseCode
                  - actuation:responseToCommand
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationCommandResponse
    patch:
      summary: Update a single property on a specific 'actuation:ActuationCommandResponse' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommandResponse' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationCommandResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationCommandResponse'
                - type: object
                  required:
                  - actuation:responseCode
                  - actuation:responseToCommand
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationCommandResponse
    delete:
      summary: Delete a 'actuation:ActuationCommandResponse' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationCommandResponse' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationCommandResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ActuationCommandResponse' entity was successfully deleted."
      tags:
      - actuation:ActuationCommandResponse
  /actuation:ActuationEvent:
    get:
      summary: Get 'actuation:ActuationEvent' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/actuation%3aActuationEvent'
          description: An array of 'actuation:ActuationEvent' objects.
      tags:
      - actuation:ActuationEvent
    post:
      summary: Create a new 'actuation:ActuationEvent' object.
      parameters:
      - name: entity
        description: New 'actuation:ActuationEvent' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationEvent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aActuationEvent'
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ActuationEvent
  /actuation:ActuationEvent/{id}:
    get:
      summary: Get a specific 'actuation:ActuationEvent' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationEvent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationEvent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aActuationEvent'
          description: A 'actuation:ActuationEvent' object.
      tags:
      - actuation:ActuationEvent
    put:
      summary: Update an existing 'actuation:ActuationEvent' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationEvent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ActuationEvent' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationEvent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationEvent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aActuationEvent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationEvent
    patch:
      summary: Update a single property on a specific 'actuation:ActuationEvent' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationEvent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aActuationEvent'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationEvent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aActuationEvent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationEvent
    delete:
      summary: Delete a 'actuation:ActuationEvent' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationEvent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationEvent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ActuationEvent' entity was successfully deleted."
      tags:
      - actuation:ActuationEvent
  /actuation:ActuationInterface:
    get:
      summary: Get 'actuation:ActuationInterface' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:isActuationInterfaceOf
        description: Filter value on property 'actuation:isActuationInterfaceOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:isDefaultActuationInterfaceOf
        description: Filter value on property 'actuation:isDefaultActuationInterfaceOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:payloadKeyValueDefinition
        description: Filter value on property 'actuation:payloadKeyValueDefinition'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        allOf:
                        - $ref: '#/components/schemas/actuation%3aActuationInterface'
                        - type: object
                          required:
                          - actuation:payloadKeyValueDefinition
          description: An array of 'actuation:ActuationInterface' objects.
      tags:
      - actuation:ActuationInterface
    post:
      summary: Create a new 'actuation:ActuationInterface' object.
      parameters:
      - name: entity
        description: New 'actuation:ActuationInterface' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationInterface'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationInterface'
                - type: object
                  required:
                  - actuation:payloadKeyValueDefinition
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ActuationInterface
  /actuation:ActuationInterface/{id}:
    get:
      summary: Get a specific 'actuation:ActuationInterface' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationInterface' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationInterface' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationInterface'
                - type: object
                  required:
                  - actuation:payloadKeyValueDefinition
          description: A 'actuation:ActuationInterface' object.
      tags:
      - actuation:ActuationInterface
    put:
      summary: Update an existing 'actuation:ActuationInterface' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationInterface' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ActuationInterface' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationInterface'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationInterface' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationInterface'
                - type: object
                  required:
                  - actuation:payloadKeyValueDefinition
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationInterface
    patch:
      summary: Update a single property on a specific 'actuation:ActuationInterface' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationInterface' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aActuationInterface'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationInterface' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationInterface'
                - type: object
                  required:
                  - actuation:payloadKeyValueDefinition
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationInterface
    delete:
      summary: Delete a 'actuation:ActuationInterface' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationInterface' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationInterface' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ActuationInterface' entity was successfully deleted."
      tags:
      - actuation:ActuationInterface
  /actuation:ActuationRequest:
    get:
      summary: Get 'actuation:ActuationRequest' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:generatedCommand
        description: Filter value on property 'actuation:generatedCommand'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:hasRequestResponse
        description: Filter value on property 'actuation:hasRequestResponse'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:targetInterface
        description: Filter value on property 'actuation:targetInterface'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:requestingAgent
        description: Filter value on property 'actuation:requestingAgent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:targetActuator
        description: Filter value on property 'actuation:targetActuator'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:actuationPayload
        description: Filter value on property 'actuation:actuationPayload'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        allOf:
                        - $ref: '#/components/schemas/actuation%3aActuationRequest'
                        - type: object
                          required:
                          - actuation:requestingAgent
                          - actuation:targetActuator
                          - actuation:actuationPayload
          description: An array of 'actuation:ActuationRequest' objects.
      tags:
      - actuation:ActuationRequest
    post:
      summary: Create a new 'actuation:ActuationRequest' object.
      parameters:
      - name: entity
        description: New 'actuation:ActuationRequest' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationRequest'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequest'
                - type: object
                  required:
                  - actuation:requestingAgent
                  - actuation:targetActuator
                  - actuation:actuationPayload
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ActuationRequest
  /actuation:ActuationRequest/{id}:
    get:
      summary: Get a specific 'actuation:ActuationRequest' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequest' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationRequest' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequest'
                - type: object
                  required:
                  - actuation:requestingAgent
                  - actuation:targetActuator
                  - actuation:actuationPayload
          description: A 'actuation:ActuationRequest' object.
      tags:
      - actuation:ActuationRequest
    put:
      summary: Update an existing 'actuation:ActuationRequest' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequest' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ActuationRequest' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationRequest'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationRequest' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequest'
                - type: object
                  required:
                  - actuation:requestingAgent
                  - actuation:targetActuator
                  - actuation:actuationPayload
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationRequest
    patch:
      summary: Update a single property on a specific 'actuation:ActuationRequest' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequest' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aActuationRequest'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationRequest' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequest'
                - type: object
                  required:
                  - actuation:requestingAgent
                  - actuation:targetActuator
                  - actuation:actuationPayload
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationRequest
    delete:
      summary: Delete a 'actuation:ActuationRequest' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequest' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationRequest' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ActuationRequest' entity was successfully deleted."
      tags:
      - actuation:ActuationRequest
  /actuation:ActuationRequestResponse:
    get:
      summary: Get 'actuation:ActuationRequestResponse' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:actuationObservedBy
        description: Filter value on property 'actuation:actuationObservedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:generatedCommandResponse
        description: Filter value on property 'actuation:generatedCommandResponse'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:responseToRequest
        description: Filter value on property 'actuation:responseToRequest'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:requestAccepted
        description: Filter value on property 'actuation:requestAccepted'.
        schema:
          type: boolean
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        allOf:
                        - $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
                        - type: object
                          required:
                          - actuation:generatedCommandResponse
                          - actuation:responseToRequest
                          - actuation:requestAccepted
          description: An array of 'actuation:ActuationRequestResponse' objects.
      tags:
      - actuation:ActuationRequestResponse
    post:
      summary: Create a new 'actuation:ActuationRequestResponse' object.
      parameters:
      - name: entity
        description: New 'actuation:ActuationRequestResponse' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
                - type: object
                  required:
                  - actuation:generatedCommandResponse
                  - actuation:responseToRequest
                  - actuation:requestAccepted
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ActuationRequestResponse
  /actuation:ActuationRequestResponse/{id}:
    get:
      summary: Get a specific 'actuation:ActuationRequestResponse' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequestResponse' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationRequestResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
                - type: object
                  required:
                  - actuation:generatedCommandResponse
                  - actuation:responseToRequest
                  - actuation:requestAccepted
          description: A 'actuation:ActuationRequestResponse' object.
      tags:
      - actuation:ActuationRequestResponse
    put:
      summary: Update an existing 'actuation:ActuationRequestResponse' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequestResponse' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ActuationRequestResponse' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationRequestResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
                - type: object
                  required:
                  - actuation:generatedCommandResponse
                  - actuation:responseToRequest
                  - actuation:requestAccepted
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationRequestResponse
    patch:
      summary: Update a single property on a specific 'actuation:ActuationRequestResponse' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequestResponse' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ActuationRequestResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aActuationRequestResponse'
                - type: object
                  required:
                  - actuation:generatedCommandResponse
                  - actuation:responseToRequest
                  - actuation:requestAccepted
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ActuationRequestResponse
    delete:
      summary: Delete a 'actuation:ActuationRequestResponse' object.
      parameters:
      - name: id
        description: Id of 'actuation:ActuationRequestResponse' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ActuationRequestResponse' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ActuationRequestResponse' entity was successfully deleted."
      tags:
      - actuation:ActuationRequestResponse
  /actuation:KeyValueDefinition:
    get:
      summary: Get 'actuation:KeyValueDefinition' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:valueRestriction
        description: Filter value on property 'actuation:valueRestriction'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:keyMandatory
        description: Filter value on property 'actuation:keyMandatory'.
        schema:
          type: boolean
        in: query
      - name: actuation:keyString
        description: Filter value on property 'actuation:keyString'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: actuation:valueDatatype
        description: Filter value on property 'actuation:valueDatatype'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        allOf:
                        - $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
                        - type: object
                          required:
                          - actuation:keyMandatory
                          - actuation:keyString
                          - actuation:valueDatatype
          description: An array of 'actuation:KeyValueDefinition' objects.
      tags:
      - actuation:KeyValueDefinition
    post:
      summary: Create a new 'actuation:KeyValueDefinition' object.
      parameters:
      - name: entity
        description: New 'actuation:KeyValueDefinition' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
                - type: object
                  required:
                  - actuation:keyMandatory
                  - actuation:keyString
                  - actuation:valueDatatype
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:KeyValueDefinition
  /actuation:KeyValueDefinition/{id}:
    get:
      summary: Get a specific 'actuation:KeyValueDefinition' object.
      parameters:
      - name: id
        description: Id of 'actuation:KeyValueDefinition' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:KeyValueDefinition' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
                - type: object
                  required:
                  - actuation:keyMandatory
                  - actuation:keyString
                  - actuation:valueDatatype
          description: A 'actuation:KeyValueDefinition' object.
      tags:
      - actuation:KeyValueDefinition
    put:
      summary: Update an existing 'actuation:KeyValueDefinition' entity.
      parameters:
      - name: id
        description: Id of 'actuation:KeyValueDefinition' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:KeyValueDefinition' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:KeyValueDefinition' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
                - type: object
                  required:
                  - actuation:keyMandatory
                  - actuation:keyString
                  - actuation:valueDatatype
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:KeyValueDefinition
    patch:
      summary: Update a single property on a specific 'actuation:KeyValueDefinition' object.
      parameters:
      - name: id
        description: Id of 'actuation:KeyValueDefinition' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:KeyValueDefinition' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/actuation%3aKeyValueDefinition'
                - type: object
                  required:
                  - actuation:keyMandatory
                  - actuation:keyString
                  - actuation:valueDatatype
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:KeyValueDefinition
    delete:
      summary: Delete a 'actuation:KeyValueDefinition' object.
      parameters:
      - name: id
        description: Id of 'actuation:KeyValueDefinition' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:KeyValueDefinition' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:KeyValueDefinition' entity was successfully deleted."
      tags:
      - actuation:KeyValueDefinition
  /actuation:ResponseCode:
    get:
      summary: Get 'actuation:ResponseCode' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:responseCodeInteger
        description: Filter value on property 'actuation:responseCodeInteger'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: actuation:responseCodeString
        description: Filter value on property 'actuation:responseCodeString'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/actuation%3aResponseCode'
          description: An array of 'actuation:ResponseCode' objects.
      tags:
      - actuation:ResponseCode
    post:
      summary: Create a new 'actuation:ResponseCode' object.
      parameters:
      - name: entity
        description: New 'actuation:ResponseCode' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aResponseCode'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aResponseCode'
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ResponseCode
  /actuation:ResponseCode/{id}:
    get:
      summary: Get a specific 'actuation:ResponseCode' object.
      parameters:
      - name: id
        description: Id of 'actuation:ResponseCode' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ResponseCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aResponseCode'
          description: A 'actuation:ResponseCode' object.
      tags:
      - actuation:ResponseCode
    put:
      summary: Update an existing 'actuation:ResponseCode' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ResponseCode' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ResponseCode' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aResponseCode'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ResponseCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aResponseCode'
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ResponseCode
    patch:
      summary: Update a single property on a specific 'actuation:ResponseCode' object.
      parameters:
      - name: id
        description: Id of 'actuation:ResponseCode' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aResponseCode'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ResponseCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aResponseCode'
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ResponseCode
    delete:
      summary: Delete a 'actuation:ResponseCode' object.
      parameters:
      - name: id
        description: Id of 'actuation:ResponseCode' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ResponseCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ResponseCode' entity was successfully deleted."
      tags:
      - actuation:ResponseCode
  /actuation:ValueRestriction:
    get:
      summary: Get 'actuation:ValueRestriction' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: actuation:valueRestrictionResolution
        description: Filter value on property 'actuation:valueRestrictionResolution'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: actuation:valueRestrictionType
        description: Filter value on property 'actuation:valueRestrictionType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/actuation%3aValueRestriction'
          description: An array of 'actuation:ValueRestriction' objects.
      tags:
      - actuation:ValueRestriction
    post:
      summary: Create a new 'actuation:ValueRestriction' object.
      parameters:
      - name: entity
        description: New 'actuation:ValueRestriction' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aValueRestriction'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aValueRestriction'
          description: Entity was successfully created (new representation returned).
      tags:
      - actuation:ValueRestriction
  /actuation:ValueRestriction/{id}:
    get:
      summary: Get a specific 'actuation:ValueRestriction' object.
      parameters:
      - name: id
        description: Id of 'actuation:ValueRestriction' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ValueRestriction' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aValueRestriction'
          description: A 'actuation:ValueRestriction' object.
      tags:
      - actuation:ValueRestriction
    put:
      summary: Update an existing 'actuation:ValueRestriction' entity.
      parameters:
      - name: id
        description: Id of 'actuation:ValueRestriction' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'actuation:ValueRestriction' entity.
        required: true
        schema:
          $ref: '#/components/schemas/actuation%3aValueRestriction'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ValueRestriction' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aValueRestriction'
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ValueRestriction
    patch:
      summary: Update a single property on a specific 'actuation:ValueRestriction' object.
      parameters:
      - name: id
        description: Id of 'actuation:ValueRestriction' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/actuation%3aValueRestriction'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'actuation:ValueRestriction' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/actuation%3aValueRestriction'
          description: Entity was updated successfully (new representation returned).
      tags:
      - actuation:ValueRestriction
    delete:
      summary: Delete a 'actuation:ValueRestriction' object.
      parameters:
      - name: id
        description: Id of 'actuation:ValueRestriction' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'actuation:ValueRestriction' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'actuation:ValueRestriction' entity was successfully deleted."
      tags:
      - actuation:ValueRestriction
  /device:Actuator:
    get:
      summary: Get 'device:Actuator' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: device:devicePlacementContext
        description: Filter value on property 'device:devicePlacementContext'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasCommunicationsBus
        description: Filter value on property 'device:hasCommunicationsBus'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasDeviceFunctionType
        description: Filter value on property 'device:hasDeviceFunctionType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDataPointType
        description: Filter value on property 'device:hasKNXDataPointType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasModbusDataType
        description: Filter value on property 'device:hasModbusDataType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasModbusFunctionCode
        description: Filter value on property 'device:hasModbusFunctionCode'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasIPAddressPort
        description: Filter value on property 'device:hasIPAddressPort'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDeviceId
        description: Filter value on property 'device:hasKNXDeviceId'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDevicePort
        description: Filter value on property 'device:hasKNXDevicePort'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasLoraDevEUI
        description: Filter value on property 'device:hasLoraDevEUI'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasModbusNodeId
        description: Filter value on property 'device:hasModbusNodeId'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasModbusRegister
        description: Filter value on property 'device:hasModbusRegister'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasOffset
        description: Filter value on property 'device:hasOffset'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: device:hasScaleFactor
        description: Filter value on property 'device:hasScaleFactor'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: device:observedBy
        description: Filter value on property 'device:observedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aActuator'
          description: An array of 'device:Actuator' objects.
      tags:
      - device:Actuator
    post:
      summary: Create a new 'device:Actuator' object.
      parameters:
      - name: entity
        description: New 'device:Actuator' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aActuator'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aActuator'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:Actuator
  /device:Actuator/{id}:
    get:
      summary: Get a specific 'device:Actuator' object.
      parameters:
      - name: id
        description: Id of 'device:Actuator' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Actuator' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aActuator'
          description: A 'device:Actuator' object.
      tags:
      - device:Actuator
    put:
      summary: Update an existing 'device:Actuator' entity.
      parameters:
      - name: id
        description: Id of 'device:Actuator' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:Actuator' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aActuator'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Actuator' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aActuator'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Actuator
    patch:
      summary: Update a single property on a specific 'device:Actuator' object.
      parameters:
      - name: id
        description: Id of 'device:Actuator' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aActuator'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Actuator' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aActuator'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Actuator
    delete:
      summary: Delete a 'device:Actuator' object.
      parameters:
      - name: id
        description: Id of 'device:Actuator' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Actuator' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:Actuator' entity was successfully deleted."
      tags:
      - device:Actuator
  /device:BACnetConfiguration:
    get:
      summary: Get 'device:BACnetConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aBACnetConfiguration'
          description: An array of 'device:BACnetConfiguration' objects.
      tags:
      - device:BACnetConfiguration
    post:
      summary: Create a new 'device:BACnetConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:BACnetConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aBACnetConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aBACnetConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:BACnetConfiguration
  /device:BACnetConfiguration/{id}:
    get:
      summary: Get a specific 'device:BACnetConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:BACnetConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:BACnetConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aBACnetConfiguration'
          description: A 'device:BACnetConfiguration' object.
      tags:
      - device:BACnetConfiguration
    put:
      summary: Update an existing 'device:BACnetConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:BACnetConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:BACnetConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aBACnetConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:BACnetConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aBACnetConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:BACnetConfiguration
    patch:
      summary: Update a single property on a specific 'device:BACnetConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:BACnetConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aBACnetConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:BACnetConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aBACnetConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:BACnetConfiguration
    delete:
      summary: Delete a 'device:BACnetConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:BACnetConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:BACnetConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:BACnetConfiguration' entity was successfully deleted."
      tags:
      - device:BACnetConfiguration
  /device:CommunicationConfiguration:
    get:
      summary: Get 'device:CommunicationConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aCommunicationConfiguration'
          description: An array of 'device:CommunicationConfiguration' objects.
      tags:
      - device:CommunicationConfiguration
    post:
      summary: Create a new 'device:CommunicationConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:CommunicationConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aCommunicationConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:CommunicationConfiguration
  /device:CommunicationConfiguration/{id}:
    get:
      summary: Get a specific 'device:CommunicationConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:CommunicationConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:CommunicationConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationConfiguration'
          description: A 'device:CommunicationConfiguration' object.
      tags:
      - device:CommunicationConfiguration
    put:
      summary: Update an existing 'device:CommunicationConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:CommunicationConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:CommunicationConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aCommunicationConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:CommunicationConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:CommunicationConfiguration
    patch:
      summary: Update a single property on a specific 'device:CommunicationConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:CommunicationConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aCommunicationConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:CommunicationConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:CommunicationConfiguration
    delete:
      summary: Delete a 'device:CommunicationConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:CommunicationConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:CommunicationConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:CommunicationConfiguration' entity was successfully deleted."
      tags:
      - device:CommunicationConfiguration
  /device:CommunicationsBus:
    get:
      summary: Get 'device:CommunicationsBus' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aCommunicationsBus'
          description: An array of 'device:CommunicationsBus' objects.
      tags:
      - device:CommunicationsBus
    post:
      summary: Create a new 'device:CommunicationsBus' object.
      parameters:
      - name: entity
        description: New 'device:CommunicationsBus' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aCommunicationsBus'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationsBus'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:CommunicationsBus
  /device:CommunicationsBus/{id}:
    get:
      summary: Get a specific 'device:CommunicationsBus' object.
      parameters:
      - name: id
        description: Id of 'device:CommunicationsBus' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:CommunicationsBus' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationsBus'
          description: A 'device:CommunicationsBus' object.
      tags:
      - device:CommunicationsBus
    put:
      summary: Update an existing 'device:CommunicationsBus' entity.
      parameters:
      - name: id
        description: Id of 'device:CommunicationsBus' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:CommunicationsBus' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aCommunicationsBus'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:CommunicationsBus' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationsBus'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:CommunicationsBus
    patch:
      summary: Update a single property on a specific 'device:CommunicationsBus' object.
      parameters:
      - name: id
        description: Id of 'device:CommunicationsBus' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aCommunicationsBus'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:CommunicationsBus' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aCommunicationsBus'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:CommunicationsBus
    delete:
      summary: Delete a 'device:CommunicationsBus' object.
      parameters:
      - name: id
        description: Id of 'device:CommunicationsBus' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:CommunicationsBus' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:CommunicationsBus' entity was successfully deleted."
      tags:
      - device:CommunicationsBus
  /device:DeviceEvents:
    get:
      summary: Get 'device:DeviceEvents' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: device:eventPlacementContext
        description: Filter value on property 'device:eventPlacementContext'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aDeviceEvents'
          description: An array of 'device:DeviceEvents' objects.
      tags:
      - device:DeviceEvents
    post:
      summary: Create a new 'device:DeviceEvents' object.
      parameters:
      - name: entity
        description: New 'device:DeviceEvents' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aDeviceEvents'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceEvents'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:DeviceEvents
  /device:DeviceEvents/{id}:
    get:
      summary: Get a specific 'device:DeviceEvents' object.
      parameters:
      - name: id
        description: Id of 'device:DeviceEvents' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:DeviceEvents' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceEvents'
          description: A 'device:DeviceEvents' object.
      tags:
      - device:DeviceEvents
    put:
      summary: Update an existing 'device:DeviceEvents' entity.
      parameters:
      - name: id
        description: Id of 'device:DeviceEvents' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:DeviceEvents' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aDeviceEvents'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:DeviceEvents' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceEvents'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:DeviceEvents
    patch:
      summary: Update a single property on a specific 'device:DeviceEvents' object.
      parameters:
      - name: id
        description: Id of 'device:DeviceEvents' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aDeviceEvents'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:DeviceEvents' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceEvents'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:DeviceEvents
    delete:
      summary: Delete a 'device:DeviceEvents' object.
      parameters:
      - name: id
        description: Id of 'device:DeviceEvents' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:DeviceEvents' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:DeviceEvents' entity was successfully deleted."
      tags:
      - device:DeviceEvents
  /device:DeviceFunctionType:
    get:
      summary: Get 'device:DeviceFunctionType' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aDeviceFunctionType'
          description: An array of 'device:DeviceFunctionType' objects.
      tags:
      - device:DeviceFunctionType
    post:
      summary: Create a new 'device:DeviceFunctionType' object.
      parameters:
      - name: entity
        description: New 'device:DeviceFunctionType' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aDeviceFunctionType'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceFunctionType'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:DeviceFunctionType
  /device:DeviceFunctionType/{id}:
    get:
      summary: Get a specific 'device:DeviceFunctionType' object.
      parameters:
      - name: id
        description: Id of 'device:DeviceFunctionType' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:DeviceFunctionType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceFunctionType'
          description: A 'device:DeviceFunctionType' object.
      tags:
      - device:DeviceFunctionType
    put:
      summary: Update an existing 'device:DeviceFunctionType' entity.
      parameters:
      - name: id
        description: Id of 'device:DeviceFunctionType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:DeviceFunctionType' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aDeviceFunctionType'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:DeviceFunctionType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceFunctionType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:DeviceFunctionType
    patch:
      summary: Update a single property on a specific 'device:DeviceFunctionType' object.
      parameters:
      - name: id
        description: Id of 'device:DeviceFunctionType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aDeviceFunctionType'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:DeviceFunctionType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aDeviceFunctionType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:DeviceFunctionType
    delete:
      summary: Delete a 'device:DeviceFunctionType' object.
      parameters:
      - name: id
        description: Id of 'device:DeviceFunctionType' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:DeviceFunctionType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:DeviceFunctionType' entity was successfully deleted."
      tags:
      - device:DeviceFunctionType
  /device:Exception:
    get:
      summary: Get 'device:Exception' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: device:exceptionGeneratedBy
        description: Filter value on property 'device:exceptionGeneratedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:eventPlacementContext
        description: Filter value on property 'device:eventPlacementContext'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aException'
          description: An array of 'device:Exception' objects.
      tags:
      - device:Exception
    post:
      summary: Create a new 'device:Exception' object.
      parameters:
      - name: entity
        description: New 'device:Exception' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aException'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aException'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:Exception
  /device:Exception/{id}:
    get:
      summary: Get a specific 'device:Exception' object.
      parameters:
      - name: id
        description: Id of 'device:Exception' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Exception' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aException'
          description: A 'device:Exception' object.
      tags:
      - device:Exception
    put:
      summary: Update an existing 'device:Exception' entity.
      parameters:
      - name: id
        description: Id of 'device:Exception' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:Exception' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aException'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Exception' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aException'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Exception
    patch:
      summary: Update a single property on a specific 'device:Exception' object.
      parameters:
      - name: id
        description: Id of 'device:Exception' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aException'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Exception' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aException'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Exception
    delete:
      summary: Delete a 'device:Exception' object.
      parameters:
      - name: id
        description: Id of 'device:Exception' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Exception' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:Exception' entity was successfully deleted."
      tags:
      - device:Exception
  /device:KNXConfiguration:
    get:
      summary: Get 'device:KNXConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aKNXConfiguration'
          description: An array of 'device:KNXConfiguration' objects.
      tags:
      - device:KNXConfiguration
    post:
      summary: Create a new 'device:KNXConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:KNXConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aKNXConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:KNXConfiguration
  /device:KNXConfiguration/{id}:
    get:
      summary: Get a specific 'device:KNXConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:KNXConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:KNXConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXConfiguration'
          description: A 'device:KNXConfiguration' object.
      tags:
      - device:KNXConfiguration
    put:
      summary: Update an existing 'device:KNXConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:KNXConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:KNXConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aKNXConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:KNXConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:KNXConfiguration
    patch:
      summary: Update a single property on a specific 'device:KNXConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:KNXConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aKNXConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:KNXConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:KNXConfiguration
    delete:
      summary: Delete a 'device:KNXConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:KNXConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:KNXConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:KNXConfiguration' entity was successfully deleted."
      tags:
      - device:KNXConfiguration
  /device:KNXDataPointType:
    get:
      summary: Get 'device:KNXDataPointType' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aKNXDataPointType'
          description: An array of 'device:KNXDataPointType' objects.
      tags:
      - device:KNXDataPointType
    post:
      summary: Create a new 'device:KNXDataPointType' object.
      parameters:
      - name: entity
        description: New 'device:KNXDataPointType' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aKNXDataPointType'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXDataPointType'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:KNXDataPointType
  /device:KNXDataPointType/{id}:
    get:
      summary: Get a specific 'device:KNXDataPointType' object.
      parameters:
      - name: id
        description: Id of 'device:KNXDataPointType' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:KNXDataPointType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXDataPointType'
          description: A 'device:KNXDataPointType' object.
      tags:
      - device:KNXDataPointType
    put:
      summary: Update an existing 'device:KNXDataPointType' entity.
      parameters:
      - name: id
        description: Id of 'device:KNXDataPointType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:KNXDataPointType' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aKNXDataPointType'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:KNXDataPointType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXDataPointType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:KNXDataPointType
    patch:
      summary: Update a single property on a specific 'device:KNXDataPointType' object.
      parameters:
      - name: id
        description: Id of 'device:KNXDataPointType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aKNXDataPointType'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:KNXDataPointType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aKNXDataPointType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:KNXDataPointType
    delete:
      summary: Delete a 'device:KNXDataPointType' object.
      parameters:
      - name: id
        description: Id of 'device:KNXDataPointType' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:KNXDataPointType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:KNXDataPointType' entity was successfully deleted."
      tags:
      - device:KNXDataPointType
  /device:LoRaConfiguration:
    get:
      summary: Get 'device:LoRaConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aLoRaConfiguration'
          description: An array of 'device:LoRaConfiguration' objects.
      tags:
      - device:LoRaConfiguration
    post:
      summary: Create a new 'device:LoRaConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:LoRaConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aLoRaConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aLoRaConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:LoRaConfiguration
  /device:LoRaConfiguration/{id}:
    get:
      summary: Get a specific 'device:LoRaConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:LoRaConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:LoRaConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aLoRaConfiguration'
          description: A 'device:LoRaConfiguration' object.
      tags:
      - device:LoRaConfiguration
    put:
      summary: Update an existing 'device:LoRaConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:LoRaConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:LoRaConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aLoRaConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:LoRaConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aLoRaConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:LoRaConfiguration
    patch:
      summary: Update a single property on a specific 'device:LoRaConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:LoRaConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aLoRaConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:LoRaConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aLoRaConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:LoRaConfiguration
    delete:
      summary: Delete a 'device:LoRaConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:LoRaConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:LoRaConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:LoRaConfiguration' entity was successfully deleted."
      tags:
      - device:LoRaConfiguration
  /device:MBusConfiguration:
    get:
      summary: Get 'device:MBusConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aMBusConfiguration'
          description: An array of 'device:MBusConfiguration' objects.
      tags:
      - device:MBusConfiguration
    post:
      summary: Create a new 'device:MBusConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:MBusConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aMBusConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aMBusConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:MBusConfiguration
  /device:MBusConfiguration/{id}:
    get:
      summary: Get a specific 'device:MBusConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:MBusConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:MBusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aMBusConfiguration'
          description: A 'device:MBusConfiguration' object.
      tags:
      - device:MBusConfiguration
    put:
      summary: Update an existing 'device:MBusConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:MBusConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:MBusConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aMBusConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:MBusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aMBusConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:MBusConfiguration
    patch:
      summary: Update a single property on a specific 'device:MBusConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:MBusConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aMBusConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:MBusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aMBusConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:MBusConfiguration
    delete:
      summary: Delete a 'device:MBusConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:MBusConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:MBusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:MBusConfiguration' entity was successfully deleted."
      tags:
      - device:MBusConfiguration
  /device:ModbusConfiguration:
    get:
      summary: Get 'device:ModbusConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aModbusConfiguration'
          description: An array of 'device:ModbusConfiguration' objects.
      tags:
      - device:ModbusConfiguration
    post:
      summary: Create a new 'device:ModbusConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:ModbusConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:ModbusConfiguration
  /device:ModbusConfiguration/{id}:
    get:
      summary: Get a specific 'device:ModbusConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusConfiguration'
          description: A 'device:ModbusConfiguration' object.
      tags:
      - device:ModbusConfiguration
    put:
      summary: Update an existing 'device:ModbusConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:ModbusConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:ModbusConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusConfiguration
    patch:
      summary: Update a single property on a specific 'device:ModbusConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aModbusConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusConfiguration
    delete:
      summary: Delete a 'device:ModbusConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:ModbusConfiguration' entity was successfully deleted."
      tags:
      - device:ModbusConfiguration
  /device:ModbusDataType:
    get:
      summary: Get 'device:ModbusDataType' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aModbusDataType'
          description: An array of 'device:ModbusDataType' objects.
      tags:
      - device:ModbusDataType
    post:
      summary: Create a new 'device:ModbusDataType' object.
      parameters:
      - name: entity
        description: New 'device:ModbusDataType' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusDataType'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusDataType'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:ModbusDataType
  /device:ModbusDataType/{id}:
    get:
      summary: Get a specific 'device:ModbusDataType' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusDataType' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusDataType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusDataType'
          description: A 'device:ModbusDataType' object.
      tags:
      - device:ModbusDataType
    put:
      summary: Update an existing 'device:ModbusDataType' entity.
      parameters:
      - name: id
        description: Id of 'device:ModbusDataType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:ModbusDataType' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusDataType'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusDataType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusDataType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusDataType
    patch:
      summary: Update a single property on a specific 'device:ModbusDataType' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusDataType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aModbusDataType'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusDataType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusDataType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusDataType
    delete:
      summary: Delete a 'device:ModbusDataType' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusDataType' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusDataType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:ModbusDataType' entity was successfully deleted."
      tags:
      - device:ModbusDataType
  /device:ModbusFunctionCode:
    get:
      summary: Get 'device:ModbusFunctionCode' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aModbusFunctionCode'
          description: An array of 'device:ModbusFunctionCode' objects.
      tags:
      - device:ModbusFunctionCode
    post:
      summary: Create a new 'device:ModbusFunctionCode' object.
      parameters:
      - name: entity
        description: New 'device:ModbusFunctionCode' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusFunctionCode'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusFunctionCode'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:ModbusFunctionCode
  /device:ModbusFunctionCode/{id}:
    get:
      summary: Get a specific 'device:ModbusFunctionCode' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusFunctionCode' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusFunctionCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusFunctionCode'
          description: A 'device:ModbusFunctionCode' object.
      tags:
      - device:ModbusFunctionCode
    put:
      summary: Update an existing 'device:ModbusFunctionCode' entity.
      parameters:
      - name: id
        description: Id of 'device:ModbusFunctionCode' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:ModbusFunctionCode' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusFunctionCode'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusFunctionCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusFunctionCode'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusFunctionCode
    patch:
      summary: Update a single property on a specific 'device:ModbusFunctionCode' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusFunctionCode' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aModbusFunctionCode'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusFunctionCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusFunctionCode'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusFunctionCode
    delete:
      summary: Delete a 'device:ModbusFunctionCode' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusFunctionCode' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusFunctionCode' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:ModbusFunctionCode' entity was successfully deleted."
      tags:
      - device:ModbusFunctionCode
  /device:ModbusRTUConfiguration:
    get:
      summary: Get 'device:ModbusRTUConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
          description: An array of 'device:ModbusRTUConfiguration' objects.
      tags:
      - device:ModbusRTUConfiguration
    post:
      summary: Create a new 'device:ModbusRTUConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:ModbusRTUConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:ModbusRTUConfiguration
  /device:ModbusRTUConfiguration/{id}:
    get:
      summary: Get a specific 'device:ModbusRTUConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusRTUConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusRTUConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
          description: A 'device:ModbusRTUConfiguration' object.
      tags:
      - device:ModbusRTUConfiguration
    put:
      summary: Update an existing 'device:ModbusRTUConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:ModbusRTUConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:ModbusRTUConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusRTUConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusRTUConfiguration
    patch:
      summary: Update a single property on a specific 'device:ModbusRTUConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusRTUConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusRTUConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusRTUConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusRTUConfiguration
    delete:
      summary: Delete a 'device:ModbusRTUConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusRTUConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusRTUConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:ModbusRTUConfiguration' entity was successfully deleted."
      tags:
      - device:ModbusRTUConfiguration
  /device:ModbusTCPConfiguration:
    get:
      summary: Get 'device:ModbusTCPConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
          description: An array of 'device:ModbusTCPConfiguration' objects.
      tags:
      - device:ModbusTCPConfiguration
    post:
      summary: Create a new 'device:ModbusTCPConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:ModbusTCPConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:ModbusTCPConfiguration
  /device:ModbusTCPConfiguration/{id}:
    get:
      summary: Get a specific 'device:ModbusTCPConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusTCPConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusTCPConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
          description: A 'device:ModbusTCPConfiguration' object.
      tags:
      - device:ModbusTCPConfiguration
    put:
      summary: Update an existing 'device:ModbusTCPConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:ModbusTCPConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:ModbusTCPConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusTCPConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusTCPConfiguration
    patch:
      summary: Update a single property on a specific 'device:ModbusTCPConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusTCPConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:ModbusTCPConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aModbusTCPConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:ModbusTCPConfiguration
    delete:
      summary: Delete a 'device:ModbusTCPConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:ModbusTCPConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:ModbusTCPConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:ModbusTCPConfiguration' entity was successfully deleted."
      tags:
      - device:ModbusTCPConfiguration
  /device:OPC-DAConfiguration:
    get:
      summary: Get 'device:OPC-DAConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
          description: An array of 'device:OPC-DAConfiguration' objects.
      tags:
      - device:OPC-DAConfiguration
    post:
      summary: Create a new 'device:OPC-DAConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:OPC-DAConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:OPC-DAConfiguration
  /device:OPC-DAConfiguration/{id}:
    get:
      summary: Get a specific 'device:OPC-DAConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:OPC-DAConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:OPC-DAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
          description: A 'device:OPC-DAConfiguration' object.
      tags:
      - device:OPC-DAConfiguration
    put:
      summary: Update an existing 'device:OPC-DAConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:OPC-DAConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:OPC-DAConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:OPC-DAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:OPC-DAConfiguration
    patch:
      summary: Update a single property on a specific 'device:OPC-DAConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:OPC-DAConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:OPC-DAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-DAConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:OPC-DAConfiguration
    delete:
      summary: Delete a 'device:OPC-DAConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:OPC-DAConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:OPC-DAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:OPC-DAConfiguration' entity was successfully deleted."
      tags:
      - device:OPC-DAConfiguration
  /device:OPC-UAConfiguration:
    get:
      summary: Get 'device:OPC-UAConfiguration' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
          description: An array of 'device:OPC-UAConfiguration' objects.
      tags:
      - device:OPC-UAConfiguration
    post:
      summary: Create a new 'device:OPC-UAConfiguration' object.
      parameters:
      - name: entity
        description: New 'device:OPC-UAConfiguration' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:OPC-UAConfiguration
  /device:OPC-UAConfiguration/{id}:
    get:
      summary: Get a specific 'device:OPC-UAConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:OPC-UAConfiguration' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:OPC-UAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
          description: A 'device:OPC-UAConfiguration' object.
      tags:
      - device:OPC-UAConfiguration
    put:
      summary: Update an existing 'device:OPC-UAConfiguration' entity.
      parameters:
      - name: id
        description: Id of 'device:OPC-UAConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:OPC-UAConfiguration' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:OPC-UAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:OPC-UAConfiguration
    patch:
      summary: Update a single property on a specific 'device:OPC-UAConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:OPC-UAConfiguration' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:OPC-UAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aOPC-UAConfiguration'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:OPC-UAConfiguration
    delete:
      summary: Delete a 'device:OPC-UAConfiguration' object.
      parameters:
      - name: id
        description: Id of 'device:OPC-UAConfiguration' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:OPC-UAConfiguration' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:OPC-UAConfiguration' entity was successfully deleted."
      tags:
      - device:OPC-UAConfiguration
  /device:Observation:
    get:
      summary: Get 'device:Observation' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: device:observationGeneratedBy
        description: Filter value on property 'device:observationGeneratedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasProcessedTime
        description: Filter value on property 'device:hasProcessedTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: device:eventPlacementContext
        description: Filter value on property 'device:eventPlacementContext'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aObservation'
          description: An array of 'device:Observation' objects.
      tags:
      - device:Observation
    post:
      summary: Create a new 'device:Observation' object.
      parameters:
      - name: entity
        description: New 'device:Observation' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aObservation'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aObservation'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:Observation
  /device:Observation/{id}:
    get:
      summary: Get a specific 'device:Observation' object.
      parameters:
      - name: id
        description: Id of 'device:Observation' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Observation' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aObservation'
          description: A 'device:Observation' object.
      tags:
      - device:Observation
    put:
      summary: Update an existing 'device:Observation' entity.
      parameters:
      - name: id
        description: Id of 'device:Observation' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:Observation' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aObservation'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Observation' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aObservation'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Observation
    patch:
      summary: Update a single property on a specific 'device:Observation' object.
      parameters:
      - name: id
        description: Id of 'device:Observation' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aObservation'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Observation' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aObservation'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Observation
    delete:
      summary: Delete a 'device:Observation' object.
      parameters:
      - name: id
        description: Id of 'device:Observation' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Observation' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:Observation' entity was successfully deleted."
      tags:
      - device:Observation
  /device:PlacementContext:
    get:
      summary: Get 'device:PlacementContext' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aPlacementContext'
          description: An array of 'device:PlacementContext' objects.
      tags:
      - device:PlacementContext
    post:
      summary: Create a new 'device:PlacementContext' object.
      parameters:
      - name: entity
        description: New 'device:PlacementContext' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aPlacementContext'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPlacementContext'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:PlacementContext
  /device:PlacementContext/{id}:
    get:
      summary: Get a specific 'device:PlacementContext' object.
      parameters:
      - name: id
        description: Id of 'device:PlacementContext' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:PlacementContext' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPlacementContext'
          description: A 'device:PlacementContext' object.
      tags:
      - device:PlacementContext
    put:
      summary: Update an existing 'device:PlacementContext' entity.
      parameters:
      - name: id
        description: Id of 'device:PlacementContext' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:PlacementContext' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aPlacementContext'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:PlacementContext' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPlacementContext'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:PlacementContext
    patch:
      summary: Update a single property on a specific 'device:PlacementContext' object.
      parameters:
      - name: id
        description: Id of 'device:PlacementContext' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aPlacementContext'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:PlacementContext' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPlacementContext'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:PlacementContext
    delete:
      summary: Delete a 'device:PlacementContext' object.
      parameters:
      - name: id
        description: Id of 'device:PlacementContext' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:PlacementContext' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:PlacementContext' entity was successfully deleted."
      tags:
      - device:PlacementContext
  /device:PowerSource:
    get:
      summary: Get 'device:PowerSource' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: device:devicePlacementContext
        description: Filter value on property 'device:devicePlacementContext'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasCommunicationsBus
        description: Filter value on property 'device:hasCommunicationsBus'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasDeviceFunctionType
        description: Filter value on property 'device:hasDeviceFunctionType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDataPointType
        description: Filter value on property 'device:hasKNXDataPointType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasModbusDataType
        description: Filter value on property 'device:hasModbusDataType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasModbusFunctionCode
        description: Filter value on property 'device:hasModbusFunctionCode'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasIPAddressPort
        description: Filter value on property 'device:hasIPAddressPort'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDeviceId
        description: Filter value on property 'device:hasKNXDeviceId'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDevicePort
        description: Filter value on property 'device:hasKNXDevicePort'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasLoraDevEUI
        description: Filter value on property 'device:hasLoraDevEUI'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasModbusNodeId
        description: Filter value on property 'device:hasModbusNodeId'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasModbusRegister
        description: Filter value on property 'device:hasModbusRegister'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasOffset
        description: Filter value on property 'device:hasOffset'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: device:hasScaleFactor
        description: Filter value on property 'device:hasScaleFactor'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aPowerSource'
          description: An array of 'device:PowerSource' objects.
      tags:
      - device:PowerSource
    post:
      summary: Create a new 'device:PowerSource' object.
      parameters:
      - name: entity
        description: New 'device:PowerSource' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aPowerSource'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPowerSource'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:PowerSource
  /device:PowerSource/{id}:
    get:
      summary: Get a specific 'device:PowerSource' object.
      parameters:
      - name: id
        description: Id of 'device:PowerSource' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:PowerSource' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPowerSource'
          description: A 'device:PowerSource' object.
      tags:
      - device:PowerSource
    put:
      summary: Update an existing 'device:PowerSource' entity.
      parameters:
      - name: id
        description: Id of 'device:PowerSource' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:PowerSource' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aPowerSource'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:PowerSource' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPowerSource'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:PowerSource
    patch:
      summary: Update a single property on a specific 'device:PowerSource' object.
      parameters:
      - name: id
        description: Id of 'device:PowerSource' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aPowerSource'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:PowerSource' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aPowerSource'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:PowerSource
    delete:
      summary: Delete a 'device:PowerSource' object.
      parameters:
      - name: id
        description: Id of 'device:PowerSource' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:PowerSource' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:PowerSource' entity was successfully deleted."
      tags:
      - device:PowerSource
  /device:Sensor:
    get:
      summary: Get 'device:Sensor' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: device:generatedException
        description: Filter value on property 'device:generatedException'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:generatedObservation
        description: Filter value on property 'device:generatedObservation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:observesActuator
        description: Filter value on property 'device:observesActuator'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:devicePlacementContext
        description: Filter value on property 'device:devicePlacementContext'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasCommunicationsBus
        description: Filter value on property 'device:hasCommunicationsBus'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasDeviceFunctionType
        description: Filter value on property 'device:hasDeviceFunctionType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDataPointType
        description: Filter value on property 'device:hasKNXDataPointType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasModbusDataType
        description: Filter value on property 'device:hasModbusDataType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasModbusFunctionCode
        description: Filter value on property 'device:hasModbusFunctionCode'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasIPAddressPort
        description: Filter value on property 'device:hasIPAddressPort'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDeviceId
        description: Filter value on property 'device:hasKNXDeviceId'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: device:hasKNXDevicePort
        description: Filter value on property 'device:hasKNXDevicePort'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasLoraDevEUI
        description: Filter value on property 'device:hasLoraDevEUI'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasModbusNodeId
        description: Filter value on property 'device:hasModbusNodeId'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasModbusRegister
        description: Filter value on property 'device:hasModbusRegister'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: device:hasOffset
        description: Filter value on property 'device:hasOffset'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: device:hasScaleFactor
        description: Filter value on property 'device:hasScaleFactor'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/device%3aSensor'
          description: An array of 'device:Sensor' objects.
      tags:
      - device:Sensor
    post:
      summary: Create a new 'device:Sensor' object.
      parameters:
      - name: entity
        description: New 'device:Sensor' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aSensor'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aSensor'
          description: Entity was successfully created (new representation returned).
      tags:
      - device:Sensor
  /device:Sensor/{id}:
    get:
      summary: Get a specific 'device:Sensor' object.
      parameters:
      - name: id
        description: Id of 'device:Sensor' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aSensor'
          description: A 'device:Sensor' object.
      tags:
      - device:Sensor
    put:
      summary: Update an existing 'device:Sensor' entity.
      parameters:
      - name: id
        description: Id of 'device:Sensor' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'device:Sensor' entity.
        required: true
        schema:
          $ref: '#/components/schemas/device%3aSensor'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aSensor'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Sensor
    patch:
      summary: Update a single property on a specific 'device:Sensor' object.
      parameters:
      - name: id
        description: Id of 'device:Sensor' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/device%3aSensor'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'device:Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/device%3aSensor'
          description: Entity was updated successfully (new representation returned).
      tags:
      - device:Sensor
    delete:
      summary: Delete a 'device:Sensor' object.
      parameters:
      - name: id
        description: Id of 'device:Sensor' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'device:Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'device:Sensor' entity was successfully deleted."
      tags:
      - device:Sensor
  /core:Geometry:
    get:
      summary: Get 'core:Geometry' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:asGML
        description: Filter value on property 'core:asGML'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:asWKT
        description: Filter value on property 'core:asWKT'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSerialization
        description: Filter value on property 'core:hasSerialization'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aGeometry'
          description: An array of 'core:Geometry' objects.
      tags:
      - core:Geometry
    post:
      summary: Create a new 'core:Geometry' object.
      parameters:
      - name: entity
        description: New 'core:Geometry' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aGeometry'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeometry'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Geometry
  /core:Geometry/{id}:
    get:
      summary: Get a specific 'core:Geometry' object.
      parameters:
      - name: id
        description: Id of 'core:Geometry' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeometry'
          description: A 'core:Geometry' object.
      tags:
      - core:Geometry
    put:
      summary: Update an existing 'core:Geometry' entity.
      parameters:
      - name: id
        description: Id of 'core:Geometry' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Geometry' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aGeometry'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeometry'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Geometry
    patch:
      summary: Update a single property on a specific 'core:Geometry' object.
      parameters:
      - name: id
        description: Id of 'core:Geometry' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aGeometry'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeometry'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Geometry
    delete:
      summary: Delete a 'core:Geometry' object.
      parameters:
      - name: id
        description: Id of 'core:Geometry' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Geometry' entity was successfully deleted."
      tags:
      - core:Geometry
  /core:Agent:
    get:
      summary: Get 'core:Agent' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aAgent'
          description: An array of 'core:Agent' objects.
      tags:
      - core:Agent
    post:
      summary: Create a new 'core:Agent' object.
      parameters:
      - name: entity
        description: New 'core:Agent' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aAgent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aAgent'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Agent
  /core:Agent/{id}:
    get:
      summary: Get a specific 'core:Agent' object.
      parameters:
      - name: id
        description: Id of 'core:Agent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aAgent'
          description: A 'core:Agent' object.
      tags:
      - core:Agent
    put:
      summary: Update an existing 'core:Agent' entity.
      parameters:
      - name: id
        description: Id of 'core:Agent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Agent' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aAgent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aAgent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Agent
    patch:
      summary: Update a single property on a specific 'core:Agent' object.
      parameters:
      - name: id
        description: Id of 'core:Agent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aAgent'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aAgent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Agent
    delete:
      summary: Delete a 'core:Agent' object.
      parameters:
      - name: id
        description: Id of 'core:Agent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Agent' entity was successfully deleted."
      tags:
      - core:Agent
  /core:Building:
    get:
      summary: Get 'core:Building' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:hasBuildingComponent
        description: Filter value on property 'core:hasBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasGeoReferenceOrigo
        description: Filter value on property 'core:hasGeoReferenceOrigo'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:isPartOfRealEstate
        description: Filter value on property 'core:isPartOfRealEstate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aBuilding'
          description: An array of 'core:Building' objects.
      tags:
      - core:Building
    post:
      summary: Create a new 'core:Building' object.
      parameters:
      - name: entity
        description: New 'core:Building' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aBuilding'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuilding'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Building
  /core:Building/{id}:
    get:
      summary: Get a specific 'core:Building' object.
      parameters:
      - name: id
        description: Id of 'core:Building' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuilding'
          description: A 'core:Building' object.
      tags:
      - core:Building
    put:
      summary: Update an existing 'core:Building' entity.
      parameters:
      - name: id
        description: Id of 'core:Building' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Building' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aBuilding'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuilding'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Building
    patch:
      summary: Update a single property on a specific 'core:Building' object.
      parameters:
      - name: id
        description: Id of 'core:Building' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aBuilding'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuilding'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Building
    delete:
      summary: Delete a 'core:Building' object.
      parameters:
      - name: id
        description: Id of 'core:Building' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Building' entity was successfully deleted."
      tags:
      - core:Building
  /core:BuildingComponent:
    get:
      summary: Get 'core:BuildingComponent' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:containsMountedDevice
        description: Filter value on property 'core:containsMountedDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSubBuildingComponent
        description: Filter value on property 'core:hasSubBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSuperBuildingComponent
        description: Filter value on property 'core:hasSuperBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:isPartOfBuilding
        description: Filter value on property 'core:isPartOfBuilding'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aBuildingComponent'
          description: An array of 'core:BuildingComponent' objects.
      tags:
      - core:BuildingComponent
    post:
      summary: Create a new 'core:BuildingComponent' object.
      parameters:
      - name: entity
        description: New 'core:BuildingComponent' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aBuildingComponent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuildingComponent'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:BuildingComponent
  /core:BuildingComponent/{id}:
    get:
      summary: Get a specific 'core:BuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'core:BuildingComponent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuildingComponent'
          description: A 'core:BuildingComponent' object.
      tags:
      - core:BuildingComponent
    put:
      summary: Update an existing 'core:BuildingComponent' entity.
      parameters:
      - name: id
        description: Id of 'core:BuildingComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:BuildingComponent' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aBuildingComponent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuildingComponent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:BuildingComponent
    patch:
      summary: Update a single property on a specific 'core:BuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'core:BuildingComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aBuildingComponent'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aBuildingComponent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:BuildingComponent
    delete:
      summary: Delete a 'core:BuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'core:BuildingComponent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:BuildingComponent' entity was successfully deleted."
      tags:
      - core:BuildingComponent
  /core:Device:
    get:
      summary: Get 'core:Device' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:associatedWithEvent
        description: Filter value on property 'core:associatedWithEvent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:deviceMeasurementUnit
        description: Filter value on property 'core:deviceMeasurementUnit'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:deviceQuantityKind
        description: Filter value on property 'core:deviceQuantityKind'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSubDevice
        description: Filter value on property 'core:hasSubDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSuperDevice
        description: Filter value on property 'core:hasSuperDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:isMountedInBuildingComponent
        description: Filter value on property 'core:isMountedInBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:servesBuilding
        description: Filter value on property 'core:servesBuilding'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:servesBuildingComponent
        description: Filter value on property 'core:servesBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:servesDevice
        description: Filter value on property 'core:servesDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aDevice'
          description: An array of 'core:Device' objects.
      tags:
      - core:Device
    post:
      summary: Create a new 'core:Device' object.
      parameters:
      - name: entity
        description: New 'core:Device' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aDevice'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aDevice'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Device
  /core:Device/{id}:
    get:
      summary: Get a specific 'core:Device' object.
      parameters:
      - name: id
        description: Id of 'core:Device' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aDevice'
          description: A 'core:Device' object.
      tags:
      - core:Device
    put:
      summary: Update an existing 'core:Device' entity.
      parameters:
      - name: id
        description: Id of 'core:Device' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Device' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aDevice'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aDevice'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Device
    patch:
      summary: Update a single property on a specific 'core:Device' object.
      parameters:
      - name: id
        description: Id of 'core:Device' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aDevice'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aDevice'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Device
    delete:
      summary: Delete a 'core:Device' object.
      parameters:
      - name: id
        description: Id of 'core:Device' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Device' entity was successfully deleted."
      tags:
      - core:Device
  /core:Event:
    get:
      summary: Get 'core:Event' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:associatedWithDevice
        description: Filter value on property 'core:associatedWithDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:eventMeasurementUnit
        description: Filter value on property 'core:eventMeasurementUnit'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:eventQuantityKind
        description: Filter value on property 'core:eventQuantityKind'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasCreatedTime
        description: Filter value on property 'core:hasCreatedTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: core:hasDeletedTime
        description: Filter value on property 'core:hasDeletedTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: core:hasDuration
        description: Filter value on property 'core:hasDuration'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: core:hasObservationTime
        description: Filter value on property 'core:hasObservationTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: core:hasPointInTime
        description: Filter value on property 'core:hasPointInTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: core:hasReadTime
        description: Filter value on property 'core:hasReadTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: core:hasStartTime
        description: Filter value on property 'core:hasStartTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: core:hasStopTime
        description: Filter value on property 'core:hasStopTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: core:hasUpdatedTime
        description: Filter value on property 'core:hasUpdatedTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aEvent'
          description: An array of 'core:Event' objects.
      tags:
      - core:Event
    post:
      summary: Create a new 'core:Event' object.
      parameters:
      - name: entity
        description: New 'core:Event' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aEvent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aEvent'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Event
  /core:Event/{id}:
    get:
      summary: Get a specific 'core:Event' object.
      parameters:
      - name: id
        description: Id of 'core:Event' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aEvent'
          description: A 'core:Event' object.
      tags:
      - core:Event
    put:
      summary: Update an existing 'core:Event' entity.
      parameters:
      - name: id
        description: Id of 'core:Event' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Event' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aEvent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aEvent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Event
    patch:
      summary: Update a single property on a specific 'core:Event' object.
      parameters:
      - name: id
        description: Id of 'core:Event' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aEvent'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aEvent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Event
    delete:
      summary: Delete a 'core:Event' object.
      parameters:
      - name: id
        description: Id of 'core:Event' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Event' entity was successfully deleted."
      tags:
      - core:Event
  /core:GeoReferenceOrigo:
    get:
      summary: Get 'core:GeoReferenceOrigo' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:hasGeoReferenceBearing
        description: Filter value on property 'core:hasGeoReferenceBearing'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: core:asGML
        description: Filter value on property 'core:asGML'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:asWKT
        description: Filter value on property 'core:asWKT'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSerialization
        description: Filter value on property 'core:hasSerialization'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
          description: An array of 'core:GeoReferenceOrigo' objects.
      tags:
      - core:GeoReferenceOrigo
    post:
      summary: Create a new 'core:GeoReferenceOrigo' object.
      parameters:
      - name: entity
        description: New 'core:GeoReferenceOrigo' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:GeoReferenceOrigo
  /core:GeoReferenceOrigo/{id}:
    get:
      summary: Get a specific 'core:GeoReferenceOrigo' object.
      parameters:
      - name: id
        description: Id of 'core:GeoReferenceOrigo' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
          description: A 'core:GeoReferenceOrigo' object.
      tags:
      - core:GeoReferenceOrigo
    put:
      summary: Update an existing 'core:GeoReferenceOrigo' entity.
      parameters:
      - name: id
        description: Id of 'core:GeoReferenceOrigo' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:GeoReferenceOrigo' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:GeoReferenceOrigo
    patch:
      summary: Update a single property on a specific 'core:GeoReferenceOrigo' object.
      parameters:
      - name: id
        description: Id of 'core:GeoReferenceOrigo' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aGeoReferenceOrigo'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:GeoReferenceOrigo
    delete:
      summary: Delete a 'core:GeoReferenceOrigo' object.
      parameters:
      - name: id
        description: Id of 'core:GeoReferenceOrigo' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:GeoReferenceOrigo' entity was successfully deleted."
      tags:
      - core:GeoReferenceOrigo
  /core:Information:
    get:
      summary: Get 'core:Information' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aInformation'
          description: An array of 'core:Information' objects.
      tags:
      - core:Information
    post:
      summary: Create a new 'core:Information' object.
      parameters:
      - name: entity
        description: New 'core:Information' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aInformation'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aInformation'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Information
  /core:Information/{id}:
    get:
      summary: Get a specific 'core:Information' object.
      parameters:
      - name: id
        description: Id of 'core:Information' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aInformation'
          description: A 'core:Information' object.
      tags:
      - core:Information
    put:
      summary: Update an existing 'core:Information' entity.
      parameters:
      - name: id
        description: Id of 'core:Information' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Information' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aInformation'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aInformation'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Information
    patch:
      summary: Update a single property on a specific 'core:Information' object.
      parameters:
      - name: id
        description: Id of 'core:Information' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aInformation'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aInformation'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Information
    delete:
      summary: Delete a 'core:Information' object.
      parameters:
      - name: id
        description: Id of 'core:Information' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Information' entity was successfully deleted."
      tags:
      - core:Information
  /core:Land:
    get:
      summary: Get 'core:Land' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:isPartOfRealEstate
        description: Filter value on property 'core:isPartOfRealEstate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aLand'
          description: An array of 'core:Land' objects.
      tags:
      - core:Land
    post:
      summary: Create a new 'core:Land' object.
      parameters:
      - name: entity
        description: New 'core:Land' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aLand'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aLand'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Land
  /core:Land/{id}:
    get:
      summary: Get a specific 'core:Land' object.
      parameters:
      - name: id
        description: Id of 'core:Land' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aLand'
          description: A 'core:Land' object.
      tags:
      - core:Land
    put:
      summary: Update an existing 'core:Land' entity.
      parameters:
      - name: id
        description: Id of 'core:Land' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Land' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aLand'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aLand'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Land
    patch:
      summary: Update a single property on a specific 'core:Land' object.
      parameters:
      - name: id
        description: Id of 'core:Land' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aLand'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aLand'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Land
    delete:
      summary: Delete a 'core:Land' object.
      parameters:
      - name: id
        description: Id of 'core:Land' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Land' entity was successfully deleted."
      tags:
      - core:Land
  /core:MeasurementUnit:
    get:
      summary: Get 'core:MeasurementUnit' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aMeasurementUnit'
          description: An array of 'core:MeasurementUnit' objects.
      tags:
      - core:MeasurementUnit
    post:
      summary: Create a new 'core:MeasurementUnit' object.
      parameters:
      - name: entity
        description: New 'core:MeasurementUnit' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aMeasurementUnit'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aMeasurementUnit'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:MeasurementUnit
  /core:MeasurementUnit/{id}:
    get:
      summary: Get a specific 'core:MeasurementUnit' object.
      parameters:
      - name: id
        description: Id of 'core:MeasurementUnit' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aMeasurementUnit'
          description: A 'core:MeasurementUnit' object.
      tags:
      - core:MeasurementUnit
    put:
      summary: Update an existing 'core:MeasurementUnit' entity.
      parameters:
      - name: id
        description: Id of 'core:MeasurementUnit' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:MeasurementUnit' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aMeasurementUnit'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aMeasurementUnit'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:MeasurementUnit
    patch:
      summary: Update a single property on a specific 'core:MeasurementUnit' object.
      parameters:
      - name: id
        description: Id of 'core:MeasurementUnit' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aMeasurementUnit'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aMeasurementUnit'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:MeasurementUnit
    delete:
      summary: Delete a 'core:MeasurementUnit' object.
      parameters:
      - name: id
        description: Id of 'core:MeasurementUnit' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:MeasurementUnit' entity was successfully deleted."
      tags:
      - core:MeasurementUnit
  /core:QuantityKind:
    get:
      summary: Get 'core:QuantityKind' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:qkMeasurementUnit
        description: Filter value on property 'core:qkMeasurementUnit'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aQuantityKind'
          description: An array of 'core:QuantityKind' objects.
      tags:
      - core:QuantityKind
    post:
      summary: Create a new 'core:QuantityKind' object.
      parameters:
      - name: entity
        description: New 'core:QuantityKind' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aQuantityKind'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aQuantityKind'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:QuantityKind
  /core:QuantityKind/{id}:
    get:
      summary: Get a specific 'core:QuantityKind' object.
      parameters:
      - name: id
        description: Id of 'core:QuantityKind' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aQuantityKind'
          description: A 'core:QuantityKind' object.
      tags:
      - core:QuantityKind
    put:
      summary: Update an existing 'core:QuantityKind' entity.
      parameters:
      - name: id
        description: Id of 'core:QuantityKind' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:QuantityKind' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aQuantityKind'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aQuantityKind'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:QuantityKind
    patch:
      summary: Update a single property on a specific 'core:QuantityKind' object.
      parameters:
      - name: id
        description: Id of 'core:QuantityKind' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aQuantityKind'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aQuantityKind'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:QuantityKind
    delete:
      summary: Delete a 'core:QuantityKind' object.
      parameters:
      - name: id
        description: Id of 'core:QuantityKind' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:QuantityKind' entity was successfully deleted."
      tags:
      - core:QuantityKind
  /core:RealEstate:
    get:
      summary: Get 'core:RealEstate' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:hasRealEstateComponent
        description: Filter value on property 'core:hasRealEstateComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aRealEstate'
          description: An array of 'core:RealEstate' objects.
      tags:
      - core:RealEstate
    post:
      summary: Create a new 'core:RealEstate' object.
      parameters:
      - name: entity
        description: New 'core:RealEstate' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aRealEstate'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstate'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:RealEstate
  /core:RealEstate/{id}:
    get:
      summary: Get a specific 'core:RealEstate' object.
      parameters:
      - name: id
        description: Id of 'core:RealEstate' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstate'
          description: A 'core:RealEstate' object.
      tags:
      - core:RealEstate
    put:
      summary: Update an existing 'core:RealEstate' entity.
      parameters:
      - name: id
        description: Id of 'core:RealEstate' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:RealEstate' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aRealEstate'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstate'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:RealEstate
    patch:
      summary: Update a single property on a specific 'core:RealEstate' object.
      parameters:
      - name: id
        description: Id of 'core:RealEstate' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aRealEstate'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstate'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:RealEstate
    delete:
      summary: Delete a 'core:RealEstate' object.
      parameters:
      - name: id
        description: Id of 'core:RealEstate' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:RealEstate' entity was successfully deleted."
      tags:
      - core:RealEstate
  /core:RealEstateComponent:
    get:
      summary: Get 'core:RealEstateComponent' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:isPartOfRealEstate
        description: Filter value on property 'core:isPartOfRealEstate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aRealEstateComponent'
          description: An array of 'core:RealEstateComponent' objects.
      tags:
      - core:RealEstateComponent
    post:
      summary: Create a new 'core:RealEstateComponent' object.
      parameters:
      - name: entity
        description: New 'core:RealEstateComponent' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aRealEstateComponent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstateComponent'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:RealEstateComponent
  /core:RealEstateComponent/{id}:
    get:
      summary: Get a specific 'core:RealEstateComponent' object.
      parameters:
      - name: id
        description: Id of 'core:RealEstateComponent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstateComponent'
          description: A 'core:RealEstateComponent' object.
      tags:
      - core:RealEstateComponent
    put:
      summary: Update an existing 'core:RealEstateComponent' entity.
      parameters:
      - name: id
        description: Id of 'core:RealEstateComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:RealEstateComponent' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aRealEstateComponent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstateComponent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:RealEstateComponent
    patch:
      summary: Update a single property on a specific 'core:RealEstateComponent' object.
      parameters:
      - name: id
        description: Id of 'core:RealEstateComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aRealEstateComponent'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRealEstateComponent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:RealEstateComponent
    delete:
      summary: Delete a 'core:RealEstateComponent' object.
      parameters:
      - name: id
        description: Id of 'core:RealEstateComponent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:RealEstateComponent' entity was successfully deleted."
      tags:
      - core:RealEstateComponent
  /core:Room:
    get:
      summary: Get 'core:Room' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: core:containsMountedDevice
        description: Filter value on property 'core:containsMountedDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSubBuildingComponent
        description: Filter value on property 'core:hasSubBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:hasSuperBuildingComponent
        description: Filter value on property 'core:hasSuperBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: core:isPartOfBuilding
        description: Filter value on property 'core:isPartOfBuilding'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aRoom'
          description: An array of 'core:Room' objects.
      tags:
      - core:Room
    post:
      summary: Create a new 'core:Room' object.
      parameters:
      - name: entity
        description: New 'core:Room' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aRoom'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRoom'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Room
  /core:Room/{id}:
    get:
      summary: Get a specific 'core:Room' object.
      parameters:
      - name: id
        description: Id of 'core:Room' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRoom'
          description: A 'core:Room' object.
      tags:
      - core:Room
    put:
      summary: Update an existing 'core:Room' entity.
      parameters:
      - name: id
        description: Id of 'core:Room' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Room' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aRoom'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRoom'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Room
    patch:
      summary: Update a single property on a specific 'core:Room' object.
      parameters:
      - name: id
        description: Id of 'core:Room' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aRoom'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aRoom'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Room
    delete:
      summary: Delete a 'core:Room' object.
      parameters:
      - name: id
        description: Id of 'core:Room' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Room' entity was successfully deleted."
      tags:
      - core:Room
  /core:Software:
    get:
      summary: Get 'core:Software' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/core%3aSoftware'
          description: An array of 'core:Software' objects.
      tags:
      - core:Software
    post:
      summary: Create a new 'core:Software' object.
      parameters:
      - name: entity
        description: New 'core:Software' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aSoftware'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aSoftware'
          description: Entity was successfully created (new representation returned).
      tags:
      - core:Software
  /core:Software/{id}:
    get:
      summary: Get a specific 'core:Software' object.
      parameters:
      - name: id
        description: Id of 'core:Software' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Software' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aSoftware'
          description: A 'core:Software' object.
      tags:
      - core:Software
    put:
      summary: Update an existing 'core:Software' entity.
      parameters:
      - name: id
        description: Id of 'core:Software' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'core:Software' entity.
        required: true
        schema:
          $ref: '#/components/schemas/core%3aSoftware'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Software' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aSoftware'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Software
    patch:
      summary: Update a single property on a specific 'core:Software' object.
      parameters:
      - name: id
        description: Id of 'core:Software' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/core%3aSoftware'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'core:Software' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/core%3aSoftware'
          description: Entity was updated successfully (new representation returned).
      tags:
      - core:Software
    delete:
      summary: Delete a 'core:Software' object.
      parameters:
      - name: id
        description: Id of 'core:Software' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'core:Software' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'core:Software' entity was successfully deleted."
      tags:
      - core:Software
  /agents:Group:
    get:
      summary: Get 'agents:Group' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: agents:hasMember
        description: Filter value on property 'agents:hasMember'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/agents%3aGroup'
          description: An array of 'agents:Group' objects.
      tags:
      - agents:Group
    post:
      summary: Create a new 'agents:Group' object.
      parameters:
      - name: entity
        description: New 'agents:Group' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/agents%3aGroup'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aGroup'
          description: Entity was successfully created (new representation returned).
      tags:
      - agents:Group
  /agents:Group/{id}:
    get:
      summary: Get a specific 'agents:Group' object.
      parameters:
      - name: id
        description: Id of 'agents:Group' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'agents:Group' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aGroup'
          description: A 'agents:Group' object.
      tags:
      - agents:Group
    put:
      summary: Update an existing 'agents:Group' entity.
      parameters:
      - name: id
        description: Id of 'agents:Group' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'agents:Group' entity.
        required: true
        schema:
          $ref: '#/components/schemas/agents%3aGroup'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'agents:Group' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aGroup'
          description: Entity was updated successfully (new representation returned).
      tags:
      - agents:Group
    patch:
      summary: Update a single property on a specific 'agents:Group' object.
      parameters:
      - name: id
        description: Id of 'agents:Group' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/agents%3aGroup'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'agents:Group' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aGroup'
          description: Entity was updated successfully (new representation returned).
      tags:
      - agents:Group
    delete:
      summary: Delete a 'agents:Group' object.
      parameters:
      - name: id
        description: Id of 'agents:Group' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'agents:Group' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'agents:Group' entity was successfully deleted."
      tags:
      - agents:Group
  /agents:Organization:
    get:
      summary: Get 'agents:Organization' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/agents%3aOrganization'
          description: An array of 'agents:Organization' objects.
      tags:
      - agents:Organization
    post:
      summary: Create a new 'agents:Organization' object.
      parameters:
      - name: entity
        description: New 'agents:Organization' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/agents%3aOrganization'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aOrganization'
          description: Entity was successfully created (new representation returned).
      tags:
      - agents:Organization
  /agents:Organization/{id}:
    get:
      summary: Get a specific 'agents:Organization' object.
      parameters:
      - name: id
        description: Id of 'agents:Organization' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'agents:Organization' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aOrganization'
          description: A 'agents:Organization' object.
      tags:
      - agents:Organization
    put:
      summary: Update an existing 'agents:Organization' entity.
      parameters:
      - name: id
        description: Id of 'agents:Organization' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'agents:Organization' entity.
        required: true
        schema:
          $ref: '#/components/schemas/agents%3aOrganization'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'agents:Organization' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aOrganization'
          description: Entity was updated successfully (new representation returned).
      tags:
      - agents:Organization
    patch:
      summary: Update a single property on a specific 'agents:Organization' object.
      parameters:
      - name: id
        description: Id of 'agents:Organization' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/agents%3aOrganization'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'agents:Organization' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aOrganization'
          description: Entity was updated successfully (new representation returned).
      tags:
      - agents:Organization
    delete:
      summary: Delete a 'agents:Organization' object.
      parameters:
      - name: id
        description: Id of 'agents:Organization' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'agents:Organization' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'agents:Organization' entity was successfully deleted."
      tags:
      - agents:Organization
  /agents:Person:
    get:
      summary: Get 'agents:Person' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/agents%3aPerson'
          description: An array of 'agents:Person' objects.
      tags:
      - agents:Person
    post:
      summary: Create a new 'agents:Person' object.
      parameters:
      - name: entity
        description: New 'agents:Person' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/agents%3aPerson'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aPerson'
          description: Entity was successfully created (new representation returned).
      tags:
      - agents:Person
  /agents:Person/{id}:
    get:
      summary: Get a specific 'agents:Person' object.
      parameters:
      - name: id
        description: Id of 'agents:Person' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'agents:Person' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aPerson'
          description: A 'agents:Person' object.
      tags:
      - agents:Person
    put:
      summary: Update an existing 'agents:Person' entity.
      parameters:
      - name: id
        description: Id of 'agents:Person' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'agents:Person' entity.
        required: true
        schema:
          $ref: '#/components/schemas/agents%3aPerson'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'agents:Person' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aPerson'
          description: Entity was updated successfully (new representation returned).
      tags:
      - agents:Person
    patch:
      summary: Update a single property on a specific 'agents:Person' object.
      parameters:
      - name: id
        description: Id of 'agents:Person' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/agents%3aPerson'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'agents:Person' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/agents%3aPerson'
          description: Entity was updated successfully (new representation returned).
      tags:
      - agents:Person
    delete:
      summary: Delete a 'agents:Person' object.
      parameters:
      - name: id
        description: Id of 'agents:Person' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'agents:Person' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'agents:Person' entity was successfully deleted."
      tags:
      - agents:Person
  /building:Balcony:
    get:
      summary: Get 'building:Balcony' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aBalcony'
          description: An array of 'building:Balcony' objects.
      tags:
      - building:Balcony
    post:
      summary: Create a new 'building:Balcony' object.
      parameters:
      - name: entity
        description: New 'building:Balcony' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aBalcony'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aBalcony'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Balcony
  /building:Balcony/{id}:
    get:
      summary: Get a specific 'building:Balcony' object.
      parameters:
      - name: id
        description: Id of 'building:Balcony' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Balcony' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aBalcony'
          description: A 'building:Balcony' object.
      tags:
      - building:Balcony
    put:
      summary: Update an existing 'building:Balcony' entity.
      parameters:
      - name: id
        description: Id of 'building:Balcony' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Balcony' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aBalcony'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Balcony' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aBalcony'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Balcony
    patch:
      summary: Update a single property on a specific 'building:Balcony' object.
      parameters:
      - name: id
        description: Id of 'building:Balcony' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aBalcony'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Balcony' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aBalcony'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Balcony
    delete:
      summary: Delete a 'building:Balcony' object.
      parameters:
      - name: id
        description: Id of 'building:Balcony' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Balcony' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Balcony' entity was successfully deleted."
      tags:
      - building:Balcony
  /building:Facade:
    get:
      summary: Get 'building:Facade' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aFacade'
          description: An array of 'building:Facade' objects.
      tags:
      - building:Facade
    post:
      summary: Create a new 'building:Facade' object.
      parameters:
      - name: entity
        description: New 'building:Facade' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aFacade'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFacade'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Facade
  /building:Facade/{id}:
    get:
      summary: Get a specific 'building:Facade' object.
      parameters:
      - name: id
        description: Id of 'building:Facade' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Facade' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFacade'
          description: A 'building:Facade' object.
      tags:
      - building:Facade
    put:
      summary: Update an existing 'building:Facade' entity.
      parameters:
      - name: id
        description: Id of 'building:Facade' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Facade' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aFacade'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Facade' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFacade'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Facade
    patch:
      summary: Update a single property on a specific 'building:Facade' object.
      parameters:
      - name: id
        description: Id of 'building:Facade' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aFacade'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Facade' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFacade'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Facade
    delete:
      summary: Delete a 'building:Facade' object.
      parameters:
      - name: id
        description: Id of 'building:Facade' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Facade' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Facade' entity was successfully deleted."
      tags:
      - building:Facade
  /building:Floor:
    get:
      summary: Get 'building:Floor' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aFloor'
          description: An array of 'building:Floor' objects.
      tags:
      - building:Floor
    post:
      summary: Create a new 'building:Floor' object.
      parameters:
      - name: entity
        description: New 'building:Floor' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aFloor'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFloor'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Floor
  /building:Floor/{id}:
    get:
      summary: Get a specific 'building:Floor' object.
      parameters:
      - name: id
        description: Id of 'building:Floor' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Floor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFloor'
          description: A 'building:Floor' object.
      tags:
      - building:Floor
    put:
      summary: Update an existing 'building:Floor' entity.
      parameters:
      - name: id
        description: Id of 'building:Floor' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Floor' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aFloor'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Floor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFloor'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Floor
    patch:
      summary: Update a single property on a specific 'building:Floor' object.
      parameters:
      - name: id
        description: Id of 'building:Floor' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aFloor'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Floor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aFloor'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Floor
    delete:
      summary: Delete a 'building:Floor' object.
      parameters:
      - name: id
        description: Id of 'building:Floor' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Floor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Floor' entity was successfully deleted."
      tags:
      - building:Floor
  /building:RoofInner:
    get:
      summary: Get 'building:RoofInner' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aRoofInner'
          description: An array of 'building:RoofInner' objects.
      tags:
      - building:RoofInner
    post:
      summary: Create a new 'building:RoofInner' object.
      parameters:
      - name: entity
        description: New 'building:RoofInner' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoofInner'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofInner'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:RoofInner
  /building:RoofInner/{id}:
    get:
      summary: Get a specific 'building:RoofInner' object.
      parameters:
      - name: id
        description: Id of 'building:RoofInner' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:RoofInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofInner'
          description: A 'building:RoofInner' object.
      tags:
      - building:RoofInner
    put:
      summary: Update an existing 'building:RoofInner' entity.
      parameters:
      - name: id
        description: Id of 'building:RoofInner' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:RoofInner' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoofInner'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:RoofInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofInner'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:RoofInner
    patch:
      summary: Update a single property on a specific 'building:RoofInner' object.
      parameters:
      - name: id
        description: Id of 'building:RoofInner' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aRoofInner'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:RoofInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofInner'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:RoofInner
    delete:
      summary: Delete a 'building:RoofInner' object.
      parameters:
      - name: id
        description: Id of 'building:RoofInner' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:RoofInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:RoofInner' entity was successfully deleted."
      tags:
      - building:RoofInner
  /building:RoofOuter:
    get:
      summary: Get 'building:RoofOuter' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aRoofOuter'
          description: An array of 'building:RoofOuter' objects.
      tags:
      - building:RoofOuter
    post:
      summary: Create a new 'building:RoofOuter' object.
      parameters:
      - name: entity
        description: New 'building:RoofOuter' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoofOuter'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofOuter'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:RoofOuter
  /building:RoofOuter/{id}:
    get:
      summary: Get a specific 'building:RoofOuter' object.
      parameters:
      - name: id
        description: Id of 'building:RoofOuter' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:RoofOuter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofOuter'
          description: A 'building:RoofOuter' object.
      tags:
      - building:RoofOuter
    put:
      summary: Update an existing 'building:RoofOuter' entity.
      parameters:
      - name: id
        description: Id of 'building:RoofOuter' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:RoofOuter' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoofOuter'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:RoofOuter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofOuter'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:RoofOuter
    patch:
      summary: Update a single property on a specific 'building:RoofOuter' object.
      parameters:
      - name: id
        description: Id of 'building:RoofOuter' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aRoofOuter'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:RoofOuter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoofOuter'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:RoofOuter
    delete:
      summary: Delete a 'building:RoofOuter' object.
      parameters:
      - name: id
        description: Id of 'building:RoofOuter' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:RoofOuter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:RoofOuter' entity was successfully deleted."
      tags:
      - building:RoofOuter
  /building:RoomType:
    get:
      summary: Get 'building:RoomType' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aRoomType'
          description: An array of 'building:RoomType' objects.
      tags:
      - building:RoomType
    post:
      summary: Create a new 'building:RoomType' object.
      parameters:
      - name: entity
        description: New 'building:RoomType' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoomType'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoomType'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:RoomType
  /building:RoomType/{id}:
    get:
      summary: Get a specific 'building:RoomType' object.
      parameters:
      - name: id
        description: Id of 'building:RoomType' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:RoomType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoomType'
          description: A 'building:RoomType' object.
      tags:
      - building:RoomType
    put:
      summary: Update an existing 'building:RoomType' entity.
      parameters:
      - name: id
        description: Id of 'building:RoomType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:RoomType' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoomType'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:RoomType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoomType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:RoomType
    patch:
      summary: Update a single property on a specific 'building:RoomType' object.
      parameters:
      - name: id
        description: Id of 'building:RoomType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aRoomType'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:RoomType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoomType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:RoomType
    delete:
      summary: Delete a 'building:RoomType' object.
      parameters:
      - name: id
        description: Id of 'building:RoomType' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:RoomType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:RoomType' entity was successfully deleted."
      tags:
      - building:RoomType
  /building:Slab:
    get:
      summary: Get 'building:Slab' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aSlab'
          description: An array of 'building:Slab' objects.
      tags:
      - building:Slab
    post:
      summary: Create a new 'building:Slab' object.
      parameters:
      - name: entity
        description: New 'building:Slab' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aSlab'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aSlab'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Slab
  /building:Slab/{id}:
    get:
      summary: Get a specific 'building:Slab' object.
      parameters:
      - name: id
        description: Id of 'building:Slab' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Slab' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aSlab'
          description: A 'building:Slab' object.
      tags:
      - building:Slab
    put:
      summary: Update an existing 'building:Slab' entity.
      parameters:
      - name: id
        description: Id of 'building:Slab' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Slab' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aSlab'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Slab' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aSlab'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Slab
    patch:
      summary: Update a single property on a specific 'building:Slab' object.
      parameters:
      - name: id
        description: Id of 'building:Slab' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aSlab'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Slab' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aSlab'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Slab
    delete:
      summary: Delete a 'building:Slab' object.
      parameters:
      - name: id
        description: Id of 'building:Slab' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Slab' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Slab' entity was successfully deleted."
      tags:
      - building:Slab
  /building:Storey:
    get:
      summary: Get 'building:Storey' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aStorey'
          description: An array of 'building:Storey' objects.
      tags:
      - building:Storey
    post:
      summary: Create a new 'building:Storey' object.
      parameters:
      - name: entity
        description: New 'building:Storey' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aStorey'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aStorey'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Storey
  /building:Storey/{id}:
    get:
      summary: Get a specific 'building:Storey' object.
      parameters:
      - name: id
        description: Id of 'building:Storey' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Storey' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aStorey'
          description: A 'building:Storey' object.
      tags:
      - building:Storey
    put:
      summary: Update an existing 'building:Storey' entity.
      parameters:
      - name: id
        description: Id of 'building:Storey' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Storey' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aStorey'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Storey' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aStorey'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Storey
    patch:
      summary: Update a single property on a specific 'building:Storey' object.
      parameters:
      - name: id
        description: Id of 'building:Storey' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aStorey'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Storey' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aStorey'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Storey
    delete:
      summary: Delete a 'building:Storey' object.
      parameters:
      - name: id
        description: Id of 'building:Storey' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Storey' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Storey' entity was successfully deleted."
      tags:
      - building:Storey
  /building:Terrace:
    get:
      summary: Get 'building:Terrace' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aTerrace'
          description: An array of 'building:Terrace' objects.
      tags:
      - building:Terrace
    post:
      summary: Create a new 'building:Terrace' object.
      parameters:
      - name: entity
        description: New 'building:Terrace' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aTerrace'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aTerrace'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Terrace
  /building:Terrace/{id}:
    get:
      summary: Get a specific 'building:Terrace' object.
      parameters:
      - name: id
        description: Id of 'building:Terrace' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Terrace' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aTerrace'
          description: A 'building:Terrace' object.
      tags:
      - building:Terrace
    put:
      summary: Update an existing 'building:Terrace' entity.
      parameters:
      - name: id
        description: Id of 'building:Terrace' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Terrace' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aTerrace'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Terrace' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aTerrace'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Terrace
    patch:
      summary: Update a single property on a specific 'building:Terrace' object.
      parameters:
      - name: id
        description: Id of 'building:Terrace' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aTerrace'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Terrace' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aTerrace'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Terrace
    delete:
      summary: Delete a 'building:Terrace' object.
      parameters:
      - name: id
        description: Id of 'building:Terrace' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Terrace' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Terrace' entity was successfully deleted."
      tags:
      - building:Terrace
  /building:VirtualBuilding:
    get:
      summary: Get 'building:VirtualBuilding' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aVirtualBuilding'
          description: An array of 'building:VirtualBuilding' objects.
      tags:
      - building:VirtualBuilding
    post:
      summary: Create a new 'building:VirtualBuilding' object.
      parameters:
      - name: entity
        description: New 'building:VirtualBuilding' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aVirtualBuilding'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuilding'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:VirtualBuilding
  /building:VirtualBuilding/{id}:
    get:
      summary: Get a specific 'building:VirtualBuilding' object.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuilding' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:VirtualBuilding' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuilding'
          description: A 'building:VirtualBuilding' object.
      tags:
      - building:VirtualBuilding
    put:
      summary: Update an existing 'building:VirtualBuilding' entity.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuilding' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:VirtualBuilding' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aVirtualBuilding'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:VirtualBuilding' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuilding'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:VirtualBuilding
    patch:
      summary: Update a single property on a specific 'building:VirtualBuilding' object.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuilding' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aVirtualBuilding'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:VirtualBuilding' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuilding'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:VirtualBuilding
    delete:
      summary: Delete a 'building:VirtualBuilding' object.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuilding' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:VirtualBuilding' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:VirtualBuilding' entity was successfully deleted."
      tags:
      - building:VirtualBuilding
  /building:VirtualBuildingComponent:
    get:
      summary: Get 'building:VirtualBuildingComponent' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
          description: An array of 'building:VirtualBuildingComponent' objects.
      tags:
      - building:VirtualBuildingComponent
    post:
      summary: Create a new 'building:VirtualBuildingComponent' object.
      parameters:
      - name: entity
        description: New 'building:VirtualBuildingComponent' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:VirtualBuildingComponent
  /building:VirtualBuildingComponent/{id}:
    get:
      summary: Get a specific 'building:VirtualBuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuildingComponent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:VirtualBuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
          description: A 'building:VirtualBuildingComponent' object.
      tags:
      - building:VirtualBuildingComponent
    put:
      summary: Update an existing 'building:VirtualBuildingComponent' entity.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuildingComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:VirtualBuildingComponent' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:VirtualBuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:VirtualBuildingComponent
    patch:
      summary: Update a single property on a specific 'building:VirtualBuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuildingComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:VirtualBuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aVirtualBuildingComponent'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:VirtualBuildingComponent
    delete:
      summary: Delete a 'building:VirtualBuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'building:VirtualBuildingComponent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:VirtualBuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:VirtualBuildingComponent' entity was successfully deleted."
      tags:
      - building:VirtualBuildingComponent
  /building:Wall:
    get:
      summary: Get 'building:Wall' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aWall'
          description: An array of 'building:Wall' objects.
      tags:
      - building:Wall
    post:
      summary: Create a new 'building:Wall' object.
      parameters:
      - name: entity
        description: New 'building:Wall' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aWall'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWall'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Wall
  /building:Wall/{id}:
    get:
      summary: Get a specific 'building:Wall' object.
      parameters:
      - name: id
        description: Id of 'building:Wall' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Wall' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWall'
          description: A 'building:Wall' object.
      tags:
      - building:Wall
    put:
      summary: Update an existing 'building:Wall' entity.
      parameters:
      - name: id
        description: Id of 'building:Wall' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Wall' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aWall'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Wall' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWall'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Wall
    patch:
      summary: Update a single property on a specific 'building:Wall' object.
      parameters:
      - name: id
        description: Id of 'building:Wall' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aWall'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Wall' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWall'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Wall
    delete:
      summary: Delete a 'building:Wall' object.
      parameters:
      - name: id
        description: Id of 'building:Wall' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Wall' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Wall' entity was successfully deleted."
      tags:
      - building:Wall
  /building:WallInner:
    get:
      summary: Get 'building:WallInner' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aWallInner'
          description: An array of 'building:WallInner' objects.
      tags:
      - building:WallInner
    post:
      summary: Create a new 'building:WallInner' object.
      parameters:
      - name: entity
        description: New 'building:WallInner' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aWallInner'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWallInner'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:WallInner
  /building:WallInner/{id}:
    get:
      summary: Get a specific 'building:WallInner' object.
      parameters:
      - name: id
        description: Id of 'building:WallInner' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:WallInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWallInner'
          description: A 'building:WallInner' object.
      tags:
      - building:WallInner
    put:
      summary: Update an existing 'building:WallInner' entity.
      parameters:
      - name: id
        description: Id of 'building:WallInner' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:WallInner' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aWallInner'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:WallInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWallInner'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:WallInner
    patch:
      summary: Update a single property on a specific 'building:WallInner' object.
      parameters:
      - name: id
        description: Id of 'building:WallInner' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aWallInner'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:WallInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aWallInner'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:WallInner
    delete:
      summary: Delete a 'building:WallInner' object.
      parameters:
      - name: id
        description: Id of 'building:WallInner' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:WallInner' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:WallInner' entity was successfully deleted."
      tags:
      - building:WallInner
  /building:Room:
    get:
      summary: Get 'building:Room' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: building:roomType
        description: Filter value on property 'building:roomType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/building%3aRoom'
          description: An array of 'building:Room' objects.
      tags:
      - building:Room
    post:
      summary: Create a new 'building:Room' object.
      parameters:
      - name: entity
        description: New 'building:Room' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoom'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoom'
          description: Entity was successfully created (new representation returned).
      tags:
      - building:Room
  /building:Room/{id}:
    get:
      summary: Get a specific 'building:Room' object.
      parameters:
      - name: id
        description: Id of 'building:Room' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoom'
          description: A 'building:Room' object.
      tags:
      - building:Room
    put:
      summary: Update an existing 'building:Room' entity.
      parameters:
      - name: id
        description: Id of 'building:Room' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'building:Room' entity.
        required: true
        schema:
          $ref: '#/components/schemas/building%3aRoom'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoom'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Room
    patch:
      summary: Update a single property on a specific 'building:Room' object.
      parameters:
      - name: id
        description: Id of 'building:Room' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/building%3aRoom'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'building:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/building%3aRoom'
          description: Entity was updated successfully (new representation returned).
      tags:
      - building:Room
    delete:
      summary: Delete a 'building:Room' object.
      parameters:
      - name: id
        description: Id of 'building:Room' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'building:Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'building:Room' entity was successfully deleted."
      tags:
      - building:Room
  /lease:Leasable:
    get:
      summary: Get 'lease:Leasable' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/lease%3aLeasable'
          description: An array of 'lease:Leasable' objects.
      tags:
      - lease:Leasable
    post:
      summary: Create a new 'lease:Leasable' object.
      parameters:
      - name: entity
        description: New 'lease:Leasable' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aLeasable'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeasable'
          description: Entity was successfully created (new representation returned).
      tags:
      - lease:Leasable
  /lease:Leasable/{id}:
    get:
      summary: Get a specific 'lease:Leasable' object.
      parameters:
      - name: id
        description: Id of 'lease:Leasable' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:Leasable' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeasable'
          description: A 'lease:Leasable' object.
      tags:
      - lease:Leasable
    put:
      summary: Update an existing 'lease:Leasable' entity.
      parameters:
      - name: id
        description: Id of 'lease:Leasable' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'lease:Leasable' entity.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aLeasable'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:Leasable' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeasable'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:Leasable
    patch:
      summary: Update a single property on a specific 'lease:Leasable' object.
      parameters:
      - name: id
        description: Id of 'lease:Leasable' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/lease%3aLeasable'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:Leasable' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeasable'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:Leasable
    delete:
      summary: Delete a 'lease:Leasable' object.
      parameters:
      - name: id
        description: Id of 'lease:Leasable' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:Leasable' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'lease:Leasable' entity was successfully deleted."
      tags:
      - lease:Leasable
  /lease:Lease:
    get:
      summary: Get 'lease:Lease' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: lease:leaseOf
        description: Filter value on property 'lease:leaseOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: lease:leasee
        description: Filter value on property 'lease:leasee'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: lease:leasor
        description: Filter value on property 'lease:leasor'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: lease:regulatedBy
        description: Filter value on property 'lease:regulatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: lease:leaseEnd
        description: Filter value on property 'lease:leaseEnd'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: lease:leaseStart
        description: Filter value on property 'lease:leaseStart'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/lease%3aLease'
          description: An array of 'lease:Lease' objects.
      tags:
      - lease:Lease
    post:
      summary: Create a new 'lease:Lease' object.
      parameters:
      - name: entity
        description: New 'lease:Lease' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aLease'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLease'
          description: Entity was successfully created (new representation returned).
      tags:
      - lease:Lease
  /lease:Lease/{id}:
    get:
      summary: Get a specific 'lease:Lease' object.
      parameters:
      - name: id
        description: Id of 'lease:Lease' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:Lease' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLease'
          description: A 'lease:Lease' object.
      tags:
      - lease:Lease
    put:
      summary: Update an existing 'lease:Lease' entity.
      parameters:
      - name: id
        description: Id of 'lease:Lease' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'lease:Lease' entity.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aLease'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:Lease' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLease'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:Lease
    patch:
      summary: Update a single property on a specific 'lease:Lease' object.
      parameters:
      - name: id
        description: Id of 'lease:Lease' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/lease%3aLease'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:Lease' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLease'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:Lease
    delete:
      summary: Delete a 'lease:Lease' object.
      parameters:
      - name: id
        description: Id of 'lease:Lease' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:Lease' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'lease:Lease' entity was successfully deleted."
      tags:
      - lease:Lease
  /lease:LeaseContract:
    get:
      summary: Get 'lease:LeaseContract' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/lease%3aLeaseContract'
          description: An array of 'lease:LeaseContract' objects.
      tags:
      - lease:LeaseContract
    post:
      summary: Create a new 'lease:LeaseContract' object.
      parameters:
      - name: entity
        description: New 'lease:LeaseContract' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aLeaseContract'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeaseContract'
          description: Entity was successfully created (new representation returned).
      tags:
      - lease:LeaseContract
  /lease:LeaseContract/{id}:
    get:
      summary: Get a specific 'lease:LeaseContract' object.
      parameters:
      - name: id
        description: Id of 'lease:LeaseContract' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:LeaseContract' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeaseContract'
          description: A 'lease:LeaseContract' object.
      tags:
      - lease:LeaseContract
    put:
      summary: Update an existing 'lease:LeaseContract' entity.
      parameters:
      - name: id
        description: Id of 'lease:LeaseContract' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'lease:LeaseContract' entity.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aLeaseContract'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:LeaseContract' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeaseContract'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:LeaseContract
    patch:
      summary: Update a single property on a specific 'lease:LeaseContract' object.
      parameters:
      - name: id
        description: Id of 'lease:LeaseContract' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/lease%3aLeaseContract'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:LeaseContract' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aLeaseContract'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:LeaseContract
    delete:
      summary: Delete a 'lease:LeaseContract' object.
      parameters:
      - name: id
        description: Id of 'lease:LeaseContract' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:LeaseContract' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'lease:LeaseContract' entity was successfully deleted."
      tags:
      - lease:LeaseContract
  /lease:Premises:
    get:
      summary: Get 'lease:Premises' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      - name: lease:premisesIncludesBuilding
        description: Filter value on property 'lease:premisesIncludesBuilding'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: lease:premisesIncludesRoom
        description: Filter value on property 'lease:premisesIncludesRoom'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: lease:premisesType
        description: Filter value on property 'lease:premisesType'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/lease%3aPremises'
          description: An array of 'lease:Premises' objects.
      tags:
      - lease:Premises
    post:
      summary: Create a new 'lease:Premises' object.
      parameters:
      - name: entity
        description: New 'lease:Premises' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aPremises'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremises'
          description: Entity was successfully created (new representation returned).
      tags:
      - lease:Premises
  /lease:Premises/{id}:
    get:
      summary: Get a specific 'lease:Premises' object.
      parameters:
      - name: id
        description: Id of 'lease:Premises' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:Premises' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremises'
          description: A 'lease:Premises' object.
      tags:
      - lease:Premises
    put:
      summary: Update an existing 'lease:Premises' entity.
      parameters:
      - name: id
        description: Id of 'lease:Premises' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'lease:Premises' entity.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aPremises'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:Premises' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremises'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:Premises
    patch:
      summary: Update a single property on a specific 'lease:Premises' object.
      parameters:
      - name: id
        description: Id of 'lease:Premises' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/lease%3aPremises'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:Premises' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremises'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:Premises
    delete:
      summary: Delete a 'lease:Premises' object.
      parameters:
      - name: id
        description: Id of 'lease:Premises' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:Premises' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'lease:Premises' entity was successfully deleted."
      tags:
      - lease:Premises
  /lease:PremisesType:
    get:
      summary: Get 'lease:PremisesType' entities.
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    member:
                      type: array
                      items:
                        $ref: '#/components/schemas/lease%3aPremisesType'
          description: An array of 'lease:PremisesType' objects.
      tags:
      - lease:PremisesType
    post:
      summary: Create a new 'lease:PremisesType' object.
      parameters:
      - name: entity
        description: New 'lease:PremisesType' entity that is to be added.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aPremisesType'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremisesType'
          description: Entity was successfully created (new representation returned).
      tags:
      - lease:PremisesType
  /lease:PremisesType/{id}:
    get:
      summary: Get a specific 'lease:PremisesType' object.
      parameters:
      - name: id
        description: Id of 'lease:PremisesType' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:PremisesType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremisesType'
          description: A 'lease:PremisesType' object.
      tags:
      - lease:PremisesType
    put:
      summary: Update an existing 'lease:PremisesType' entity.
      parameters:
      - name: id
        description: Id of 'lease:PremisesType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'lease:PremisesType' entity.
        required: true
        schema:
          $ref: '#/components/schemas/lease%3aPremisesType'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:PremisesType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremisesType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:PremisesType
    patch:
      summary: Update a single property on a specific 'lease:PremisesType' object.
      parameters:
      - name: id
        description: Id of 'lease:PremisesType' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - $ref: '#/components/schemas/lease%3aPremisesType'
          - type: object
            required:
            - '@context'
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'lease:PremisesType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          content:
            application/jsonld:
              schema:
                $ref: '#/components/schemas/lease%3aPremisesType'
          description: Entity was updated successfully (new representation returned).
      tags:
      - lease:PremisesType
    delete:
      summary: Delete a 'lease:PremisesType' object.
      parameters:
      - name: id
        description: Id of 'lease:PremisesType' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'lease:PremisesType' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'lease:PremisesType' entity was successfully deleted."
      tags:
      - lease:PremisesType
servers:
- url: http://localhost:8080/



