openapi: 3.0.2
info:
  title: RealEstateCore Core Module
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: The documentation below is automatically extracted from a <dc:description> annotation on the ontology https://w3id.org/rec/core/:<br/><br/>*The REC core module collects the top-level classes and properties that span over or are reused within multiple REC modules.<br/><br/>Note that this module reuses certain classes, properties, and named individuals from other vocabularies, e.g., GeoSPARQL; the copyright conditions on those reused entities are stated in their respective rdfs:comments annotations.*
  version: "3.0"
components:
  parameters:
    pageParam:
      name: page
      description: If the result set is large, pagination across the results can be employed; in that case, this parameter defines the page number that is requested by the client. The number of items included in each page is defined by the 'size' parameter. Default is 1, i.e., the first results page is returned.
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
      in: query
    sizeParam:
      name: size
      description: The number of items to display on a returned results page (see the page parameter).
      schema:
        type: integer
        format: int32
        maximum: 100
        default: 20
      in: query
    sortParam:
      name: sort
      description: The field and direction to sort results on.
      schema:
        $ref: '#/components/schemas/SortingSchema'
      style: deepObject
      in: query
  schemas:
    HydraCollectionWrapper:
      type: object
      required:
      - '@context'
      - '@type'
      - hydra:member
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@type':
          type: string
          default: hydra:Collection
        hydra:totalItems:
          type: integer
        hydra:view:
          type: object
          properties:
            '@id':
              type: string
              format: uri
            '@type':
              type: string
              default: hydra:PartialCollectionView
            hydra:first:
              type: string
            hydra:previous:
              type: string
            hydra:next:
              type: string
            hydra:last:
              type: string
    IntegerFilter:
      type: object
      properties:
        eq:
          type: integer
        lt:
          type: integer
        lte:
          type: integer
        gt:
          type: integer
        gte:
          type: integer
    NumberFilter:
      type: object
      properties:
        eq:
          type: number
        lt:
          type: number
        lte:
          type: number
        gt:
          type: number
        gte:
          type: number
    StringFilter:
      type: object
      properties:
        eq:
          type: string
        contains:
          type: string
        regex:
          type: string
    DateTimeFilter:
      type: object
      properties:
        eq:
          type: string
          format: date-time
        starting:
          type: string
          format: date-time
        ending:
          type: string
          format: date-time
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        latest:
          type: boolean
    SortingSchema:
      type: object
      properties:
        asc:
          type: string
        desc:
          type: string
    geosparql:Geometry:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: geosparql:Geometry
        label:
          type: string
        geosparql:asGML:
          type: array
          items:
            type: string
        geosparql:asWKT:
          type: array
          items:
            type: string
        geosparql:hasSerialization:
          type: array
          items:
            type: string
    Building:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: Building
        label:
          type: string
        isPartOfRealEstate:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: RealEstate
        hasBuildingComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: BuildingComponent
        hasGeoReferenceOrigo:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: GeoReferenceOrigo
    BuildingComponent:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: BuildingComponent
        label:
          type: string
        isPartOfBuilding:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Building
        hasSuperBuildingComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: BuildingComponent
        containsMountedDevice:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Device
        hasSubBuildingComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: BuildingComponent
    Device:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: Device
        label:
          type: string
        hasSuperDevice:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Device
        quantityKind:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: QuantityKind
        isMountedInBuildingComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: BuildingComponent
        associatedWithEvent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Event
        deviceMeasurementUnit:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: MeasurementUnit
        hasSubDevice:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Device
        servesBuilding:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Building
        servesBuildingComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: BuildingComponent
        servesDevice:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Device
    Event:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: Event
        label:
          type: string
        eventMeasurementUnit:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: MeasurementUnit
        hasCreatedTime:
          type: array
          items:
            type: string
            format: date-time
        hasDeletedTime:
          type: array
          items:
            type: string
            format: date-time
        hasDuration:
          type: array
          items:
            type: number
            format: double
        hasObservationTime:
          type: array
          items:
            type: string
            format: date-time
        hasPointInTime:
          type: array
          items:
            type: string
            format: date-time
        hasReadTime:
          type: array
          items:
            type: string
            format: date-time
        hasStartTime:
          type: array
          items:
            type: string
            format: date-time
        hasStopTime:
          type: array
          items:
            type: string
            format: date-time
        hasUpdatedTime:
          type: array
          items:
            type: string
            format: date-time
    GeoReferenceOrigo:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: GeoReferenceOrigo
        label:
          type: string
        geosparql:asGML:
          type: array
          items:
            type: string
        geosparql:asWKT:
          type: array
          items:
            type: string
        geosparql:hasSerialization:
          type: array
          items:
            type: string
        hasGeoReferenceBearing:
          type: array
          items:
            type: number
            format: double
    Land:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: Land
        label:
          type: string
        isPartOfRealEstate:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: RealEstate
    MeasurementUnit:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: MeasurementUnit
        label:
          type: string
    QuantityKind:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: QuantityKind
        label:
          type: string
        qkMeasurementUnit:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: MeasurementUnit
    RealEstate:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: RealEstate
        label:
          type: string
        hasRealEstateComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: RealEstateComponent
    RealEstateComponent:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: RealEstateComponent
        label:
          type: string
        isPartOfRealEstate:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: RealEstate
    Room:
      type: object
      required:
      - '@context'
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: Room
        label:
          type: string
        isPartOfBuilding:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Building
        hasSuperBuildingComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: BuildingComponent
        containsMountedDevice:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: Device
        hasSubBuildingComponent:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: BuildingComponent
    Context:
      type: object
      required:
      - '@vocab'
      - '@base'
      - hydra
      - geosparql
      properties:
        '@vocab':
          type: string
          format: uri
          default: https://w3id.org/rec/core/
        '@base':
          type: string
          format: uri
        hydra:
          type: string
          format: uri
          default: http://www.w3.org/ns/hydra/core#
        label:
          type: string
          format: uri
          default: http://www.w3.org/2000/01/rdf-schema#label
        geosparql:
          type: string
          format: uri
          default: http://www.opengis.net/ont/geosparql#
paths:
  /LoadedOntologies:
    get:
      summary: Get the set of ontologies that were imported by the root ontology when the API was generated.
      parameters: []
      responses:
        200:
          description: A list of ontologies used to generate this API. Note that while the prefix names used here correspond with the ones given in the JSON-LD @context for the supported data types, the prefix mapping in the API is based on the Ontology IRIs given in those @context blocks, which may differ from the values given here (which give priority to version IRIs).
          content:
            application/json:
              schema:
                type: object
                required:
                - ''
                properties:
                  '':
                    type: string
                    format: uri
                    enum:
                    - https://w3id.org/rec/core/3.0/
      tags: []
  /geosparql:Geometry:
    get:
      summary: Get 'geosparql:Geometry' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: geosparql:asGML
        description: Filter value on property 'geosparql:asGML'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geosparql:asWKT
        description: Filter value on property 'geosparql:asWKT'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geosparql:hasSerialization
        description: Filter value on property 'geosparql:hasSerialization'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'geosparql:Geometry' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/geosparql%3aGeometry'
      tags:
      - geosparql:Geometry
    post:
      summary: Create a new 'geosparql:Geometry' object.
      parameters:
      - name: entity
        description: New 'geosparql:Geometry' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/geosparql%3aGeometry'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/geosparql%3aGeometry'
      tags:
      - geosparql:Geometry
  /geosparql:Geometry/{id}:
    get:
      summary: Get a specific 'geosparql:Geometry' object.
      parameters:
      - name: id
        description: Id of 'geosparql:Geometry' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'geosparql:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'geosparql:Geometry' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/geosparql%3aGeometry'
      tags:
      - geosparql:Geometry
    put:
      summary: Update an existing 'geosparql:Geometry' entity.
      parameters:
      - name: id
        description: Id of 'geosparql:Geometry' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'geosparql:Geometry' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/geosparql%3aGeometry'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'geosparql:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/geosparql%3aGeometry'
      tags:
      - geosparql:Geometry
    patch:
      summary: Update a single property on a specific 'geosparql:Geometry' object.
      parameters:
      - name: id
        description: Id of 'geosparql:Geometry' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/geosparql%3aGeometry'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'geosparql:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/geosparql%3aGeometry'
      tags:
      - geosparql:Geometry
    delete:
      summary: Delete a 'geosparql:Geometry' object.
      parameters:
      - name: id
        description: Id of 'geosparql:Geometry' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'geosparql:Geometry' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'geosparql:Geometry' entity was successfully deleted."
      tags:
      - geosparql:Geometry
  /Building:
    get:
      summary: Get 'Building' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPartOfRealEstate
        description: Filter value on property 'isPartOfRealEstate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasBuildingComponent
        description: Filter value on property 'hasBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasGeoReferenceOrigo
        description: Filter value on property 'hasGeoReferenceOrigo'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Building' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/Building'
      tags:
      - Building
    post:
      summary: Create a new 'Building' object.
      parameters:
      - name: entity
        description: New 'Building' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Building'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - Building
  /Building/{id}:
    get:
      summary: Get a specific 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Building' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - Building
    put:
      summary: Update an existing 'Building' entity.
      parameters:
      - name: id
        description: Id of 'Building' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'Building' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Building'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - Building
    patch:
      summary: Update a single property on a specific 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Building'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - Building
    delete:
      summary: Delete a 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Building' entity was successfully deleted."
      tags:
      - Building
  /BuildingComponent:
    get:
      summary: Get 'BuildingComponent' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPartOfBuilding
        description: Filter value on property 'isPartOfBuilding'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSuperBuildingComponent
        description: Filter value on property 'hasSuperBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: containsMountedDevice
        description: Filter value on property 'containsMountedDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubBuildingComponent
        description: Filter value on property 'hasSubBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'BuildingComponent' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/BuildingComponent'
      tags:
      - BuildingComponent
    post:
      summary: Create a new 'BuildingComponent' object.
      parameters:
      - name: entity
        description: New 'BuildingComponent' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/BuildingComponent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingComponent'
      tags:
      - BuildingComponent
  /BuildingComponent/{id}:
    get:
      summary: Get a specific 'BuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'BuildingComponent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'BuildingComponent' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingComponent'
      tags:
      - BuildingComponent
    put:
      summary: Update an existing 'BuildingComponent' entity.
      parameters:
      - name: id
        description: Id of 'BuildingComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'BuildingComponent' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/BuildingComponent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingComponent'
      tags:
      - BuildingComponent
    patch:
      summary: Update a single property on a specific 'BuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'BuildingComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/BuildingComponent'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingComponent'
      tags:
      - BuildingComponent
    delete:
      summary: Delete a 'BuildingComponent' object.
      parameters:
      - name: id
        description: Id of 'BuildingComponent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'BuildingComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'BuildingComponent' entity was successfully deleted."
      tags:
      - BuildingComponent
  /Device:
    get:
      summary: Get 'Device' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: hasSuperDevice
        description: Filter value on property 'hasSuperDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: quantityKind
        description: Filter value on property 'quantityKind'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: isMountedInBuildingComponent
        description: Filter value on property 'isMountedInBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: associatedWithEvent
        description: Filter value on property 'associatedWithEvent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: deviceMeasurementUnit
        description: Filter value on property 'deviceMeasurementUnit'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubDevice
        description: Filter value on property 'hasSubDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: servesBuilding
        description: Filter value on property 'servesBuilding'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: servesBuildingComponent
        description: Filter value on property 'servesBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: servesDevice
        description: Filter value on property 'servesDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Device' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/Device'
      tags:
      - Device
    post:
      summary: Create a new 'Device' object.
      parameters:
      - name: entity
        description: New 'Device' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Device'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Device'
      tags:
      - Device
  /Device/{id}:
    get:
      summary: Get a specific 'Device' object.
      parameters:
      - name: id
        description: Id of 'Device' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Device' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Device'
      tags:
      - Device
    put:
      summary: Update an existing 'Device' entity.
      parameters:
      - name: id
        description: Id of 'Device' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'Device' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Device'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Device'
      tags:
      - Device
    patch:
      summary: Update a single property on a specific 'Device' object.
      parameters:
      - name: id
        description: Id of 'Device' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Device'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Device'
      tags:
      - Device
    delete:
      summary: Delete a 'Device' object.
      parameters:
      - name: id
        description: Id of 'Device' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Device' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Device' entity was successfully deleted."
      tags:
      - Device
  /Event:
    get:
      summary: Get 'Event' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: eventMeasurementUnit
        description: Filter value on property 'eventMeasurementUnit'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasCreatedTime
        description: Filter value on property 'hasCreatedTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: hasDeletedTime
        description: Filter value on property 'hasDeletedTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: hasDuration
        description: Filter value on property 'hasDuration'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      - name: hasObservationTime
        description: Filter value on property 'hasObservationTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: hasPointInTime
        description: Filter value on property 'hasPointInTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: hasReadTime
        description: Filter value on property 'hasReadTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: hasStartTime
        description: Filter value on property 'hasStartTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: hasStopTime
        description: Filter value on property 'hasStopTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: hasUpdatedTime
        description: Filter value on property 'hasUpdatedTime'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Event' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/Event'
      tags:
      - Event
    post:
      summary: Create a new 'Event' object.
      parameters:
      - name: entity
        description: New 'Event' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Event'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - Event
  /Event/{id}:
    get:
      summary: Get a specific 'Event' object.
      parameters:
      - name: id
        description: Id of 'Event' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Event' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - Event
    put:
      summary: Update an existing 'Event' entity.
      parameters:
      - name: id
        description: Id of 'Event' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'Event' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Event'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - Event
    patch:
      summary: Update a single property on a specific 'Event' object.
      parameters:
      - name: id
        description: Id of 'Event' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Event'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - Event
    delete:
      summary: Delete a 'Event' object.
      parameters:
      - name: id
        description: Id of 'Event' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Event' entity was successfully deleted."
      tags:
      - Event
  /GeoReferenceOrigo:
    get:
      summary: Get 'GeoReferenceOrigo' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: geosparql:asGML
        description: Filter value on property 'geosparql:asGML'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geosparql:asWKT
        description: Filter value on property 'geosparql:asWKT'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geosparql:hasSerialization
        description: Filter value on property 'geosparql:hasSerialization'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasGeoReferenceBearing
        description: Filter value on property 'hasGeoReferenceBearing'.
        schema:
          $ref: '#/components/schemas/NumberFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'GeoReferenceOrigo' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/GeoReferenceOrigo'
      tags:
      - GeoReferenceOrigo
    post:
      summary: Create a new 'GeoReferenceOrigo' object.
      parameters:
      - name: entity
        description: New 'GeoReferenceOrigo' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/GeoReferenceOrigo'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/GeoReferenceOrigo'
      tags:
      - GeoReferenceOrigo
  /GeoReferenceOrigo/{id}:
    get:
      summary: Get a specific 'GeoReferenceOrigo' object.
      parameters:
      - name: id
        description: Id of 'GeoReferenceOrigo' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'GeoReferenceOrigo' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/GeoReferenceOrigo'
      tags:
      - GeoReferenceOrigo
    put:
      summary: Update an existing 'GeoReferenceOrigo' entity.
      parameters:
      - name: id
        description: Id of 'GeoReferenceOrigo' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'GeoReferenceOrigo' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/GeoReferenceOrigo'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/GeoReferenceOrigo'
      tags:
      - GeoReferenceOrigo
    patch:
      summary: Update a single property on a specific 'GeoReferenceOrigo' object.
      parameters:
      - name: id
        description: Id of 'GeoReferenceOrigo' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/GeoReferenceOrigo'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/GeoReferenceOrigo'
      tags:
      - GeoReferenceOrigo
    delete:
      summary: Delete a 'GeoReferenceOrigo' object.
      parameters:
      - name: id
        description: Id of 'GeoReferenceOrigo' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'GeoReferenceOrigo' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'GeoReferenceOrigo' entity was successfully deleted."
      tags:
      - GeoReferenceOrigo
  /Land:
    get:
      summary: Get 'Land' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPartOfRealEstate
        description: Filter value on property 'isPartOfRealEstate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Land' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/Land'
      tags:
      - Land
    post:
      summary: Create a new 'Land' object.
      parameters:
      - name: entity
        description: New 'Land' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Land'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Land'
      tags:
      - Land
  /Land/{id}:
    get:
      summary: Get a specific 'Land' object.
      parameters:
      - name: id
        description: Id of 'Land' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Land' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Land'
      tags:
      - Land
    put:
      summary: Update an existing 'Land' entity.
      parameters:
      - name: id
        description: Id of 'Land' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'Land' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Land'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Land'
      tags:
      - Land
    patch:
      summary: Update a single property on a specific 'Land' object.
      parameters:
      - name: id
        description: Id of 'Land' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Land'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Land'
      tags:
      - Land
    delete:
      summary: Delete a 'Land' object.
      parameters:
      - name: id
        description: Id of 'Land' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Land' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Land' entity was successfully deleted."
      tags:
      - Land
  /MeasurementUnit:
    get:
      summary: Get 'MeasurementUnit' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'MeasurementUnit' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/MeasurementUnit'
      tags:
      - MeasurementUnit
    post:
      summary: Create a new 'MeasurementUnit' object.
      parameters:
      - name: entity
        description: New 'MeasurementUnit' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/MeasurementUnit'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/MeasurementUnit'
      tags:
      - MeasurementUnit
  /MeasurementUnit/{id}:
    get:
      summary: Get a specific 'MeasurementUnit' object.
      parameters:
      - name: id
        description: Id of 'MeasurementUnit' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'MeasurementUnit' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/MeasurementUnit'
      tags:
      - MeasurementUnit
    put:
      summary: Update an existing 'MeasurementUnit' entity.
      parameters:
      - name: id
        description: Id of 'MeasurementUnit' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'MeasurementUnit' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/MeasurementUnit'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/MeasurementUnit'
      tags:
      - MeasurementUnit
    patch:
      summary: Update a single property on a specific 'MeasurementUnit' object.
      parameters:
      - name: id
        description: Id of 'MeasurementUnit' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/MeasurementUnit'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/MeasurementUnit'
      tags:
      - MeasurementUnit
    delete:
      summary: Delete a 'MeasurementUnit' object.
      parameters:
      - name: id
        description: Id of 'MeasurementUnit' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'MeasurementUnit' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'MeasurementUnit' entity was successfully deleted."
      tags:
      - MeasurementUnit
  /QuantityKind:
    get:
      summary: Get 'QuantityKind' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: qkMeasurementUnit
        description: Filter value on property 'qkMeasurementUnit'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'QuantityKind' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/QuantityKind'
      tags:
      - QuantityKind
    post:
      summary: Create a new 'QuantityKind' object.
      parameters:
      - name: entity
        description: New 'QuantityKind' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/QuantityKind'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/QuantityKind'
      tags:
      - QuantityKind
  /QuantityKind/{id}:
    get:
      summary: Get a specific 'QuantityKind' object.
      parameters:
      - name: id
        description: Id of 'QuantityKind' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'QuantityKind' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/QuantityKind'
      tags:
      - QuantityKind
    put:
      summary: Update an existing 'QuantityKind' entity.
      parameters:
      - name: id
        description: Id of 'QuantityKind' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'QuantityKind' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/QuantityKind'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/QuantityKind'
      tags:
      - QuantityKind
    patch:
      summary: Update a single property on a specific 'QuantityKind' object.
      parameters:
      - name: id
        description: Id of 'QuantityKind' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/QuantityKind'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/QuantityKind'
      tags:
      - QuantityKind
    delete:
      summary: Delete a 'QuantityKind' object.
      parameters:
      - name: id
        description: Id of 'QuantityKind' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'QuantityKind' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'QuantityKind' entity was successfully deleted."
      tags:
      - QuantityKind
  /RealEstate:
    get:
      summary: Get 'RealEstate' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: hasRealEstateComponent
        description: Filter value on property 'hasRealEstateComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'RealEstate' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/RealEstate'
      tags:
      - RealEstate
    post:
      summary: Create a new 'RealEstate' object.
      parameters:
      - name: entity
        description: New 'RealEstate' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/RealEstate'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstate'
      tags:
      - RealEstate
  /RealEstate/{id}:
    get:
      summary: Get a specific 'RealEstate' object.
      parameters:
      - name: id
        description: Id of 'RealEstate' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'RealEstate' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstate'
      tags:
      - RealEstate
    put:
      summary: Update an existing 'RealEstate' entity.
      parameters:
      - name: id
        description: Id of 'RealEstate' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'RealEstate' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/RealEstate'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstate'
      tags:
      - RealEstate
    patch:
      summary: Update a single property on a specific 'RealEstate' object.
      parameters:
      - name: id
        description: Id of 'RealEstate' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/RealEstate'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstate'
      tags:
      - RealEstate
    delete:
      summary: Delete a 'RealEstate' object.
      parameters:
      - name: id
        description: Id of 'RealEstate' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'RealEstate' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'RealEstate' entity was successfully deleted."
      tags:
      - RealEstate
  /RealEstateComponent:
    get:
      summary: Get 'RealEstateComponent' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPartOfRealEstate
        description: Filter value on property 'isPartOfRealEstate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'RealEstateComponent' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/RealEstateComponent'
      tags:
      - RealEstateComponent
    post:
      summary: Create a new 'RealEstateComponent' object.
      parameters:
      - name: entity
        description: New 'RealEstateComponent' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/RealEstateComponent'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstateComponent'
      tags:
      - RealEstateComponent
  /RealEstateComponent/{id}:
    get:
      summary: Get a specific 'RealEstateComponent' object.
      parameters:
      - name: id
        description: Id of 'RealEstateComponent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'RealEstateComponent' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstateComponent'
      tags:
      - RealEstateComponent
    put:
      summary: Update an existing 'RealEstateComponent' entity.
      parameters:
      - name: id
        description: Id of 'RealEstateComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'RealEstateComponent' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/RealEstateComponent'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstateComponent'
      tags:
      - RealEstateComponent
    patch:
      summary: Update a single property on a specific 'RealEstateComponent' object.
      parameters:
      - name: id
        description: Id of 'RealEstateComponent' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/RealEstateComponent'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/RealEstateComponent'
      tags:
      - RealEstateComponent
    delete:
      summary: Delete a 'RealEstateComponent' object.
      parameters:
      - name: id
        description: Id of 'RealEstateComponent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'RealEstateComponent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'RealEstateComponent' entity was successfully deleted."
      tags:
      - RealEstateComponent
  /Room:
    get:
      summary: Get 'Room' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPartOfBuilding
        description: Filter value on property 'isPartOfBuilding'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSuperBuildingComponent
        description: Filter value on property 'hasSuperBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: containsMountedDevice
        description: Filter value on property 'containsMountedDevice'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubBuildingComponent
        description: Filter value on property 'hasSubBuildingComponent'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Room' objects.
          content:
            application/jsonld:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        $ref: '#/components/schemas/Room'
      tags:
      - Room
    post:
      summary: Create a new 'Room' object.
      parameters:
      - name: entity
        description: New 'Room' entity that is to be added.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Room'
        in: header
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - Room
  /Room/{id}:
    get:
      summary: Get a specific 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Room' object.
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - Room
    put:
      summary: Update an existing 'Room' entity.
      parameters:
      - name: id
        description: Id of 'Room' to update.
        required: true
        schema:
          type: string
        in: path
      - name: entity
        description: Updated data for 'Room' entity.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Room'
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - Room
    patch:
      summary: Update a single property on a specific 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to update.
        required: true
        schema:
          type: string
        in: path
      - name: patch
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        schema:
          allOf:
          - type: object
            required:
            - '@context'
            properties:
              '@context':
                $ref: '#/components/schemas/Context'
          - $ref: '#/components/schemas/Room'
          - type: object
            maxProperties: 2
            minProperties: 2
        in: header
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/jsonld:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - Room
    delete:
      summary: Delete a 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Room' entity was successfully deleted."
      tags:
      - Room
servers:
- url: http://localhost:8080/



