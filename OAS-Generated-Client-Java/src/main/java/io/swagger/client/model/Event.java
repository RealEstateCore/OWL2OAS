/*
 * RealEstateCore Core Module
 * The documentation below is automatically extracted from an <rdfs:comment> annotation on the ontology RealEstateCore Core Module:<br/><br/>*The REC core module collects the top-level classes and properties that span over or are reused within multiple REC modules.<br/><br/>Note that this module reuses certain classes, properties, and named individuals from other vocabularies, e.g., GeoSPARQL; the copyright conditions on those reused entities are stated in their respective rdfs:comments annotations.*
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Context;
import io.swagger.client.model.MeasurementUnit;
import io.swagger.client.model.QuantityKind;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Event
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-10-16T06:50:30.499Z[GMT]")
public class Event {
  @SerializedName("@context")
  private Context _atContext = null;

  @SerializedName("@id")
  private String _atId = null;

  @SerializedName("@type")
  private String _atType = "Event";

  @SerializedName("label")
  private String label = null;

  @SerializedName("eventMeasurementUnit")
  private List<MeasurementUnit> eventMeasurementUnit = null;

  @SerializedName("eventQuantityKind")
  private List<QuantityKind> eventQuantityKind = null;

  @SerializedName("hasCreatedTime")
  private List<OffsetDateTime> hasCreatedTime = null;

  @SerializedName("hasDeletedTime")
  private List<OffsetDateTime> hasDeletedTime = null;

  @SerializedName("hasDuration")
  private List<Double> hasDuration = null;

  @SerializedName("hasObservationTime")
  private List<OffsetDateTime> hasObservationTime = null;

  @SerializedName("hasPointInTime")
  private List<OffsetDateTime> hasPointInTime = null;

  @SerializedName("hasReadTime")
  private List<OffsetDateTime> hasReadTime = null;

  @SerializedName("hasStartTime")
  private List<OffsetDateTime> hasStartTime = null;

  @SerializedName("hasStopTime")
  private List<OffsetDateTime> hasStopTime = null;

  @SerializedName("hasUpdatedTime")
  private List<OffsetDateTime> hasUpdatedTime = null;

  public Event _atContext(Context _atContext) {
    this._atContext = _atContext;
    return this;
  }

   /**
   * Get _atContext
   * @return _atContext
  **/
  @Schema(description = "")
  public Context getAtContext() {
    return _atContext;
  }

  public void setAtContext(Context _atContext) {
    this._atContext = _atContext;
  }

  public Event _atId(String _atId) {
    this._atId = _atId;
    return this;
  }

   /**
   * Get _atId
   * @return _atId
  **/
  @Schema(description = "")
  public String getAtId() {
    return _atId;
  }

  public void setAtId(String _atId) {
    this._atId = _atId;
  }

  public Event _atType(String _atType) {
    this._atType = _atType;
    return this;
  }

   /**
   * Get _atType
   * @return _atType
  **/
  @Schema(description = "")
  public String getAtType() {
    return _atType;
  }

  public void setAtType(String _atType) {
    this._atType = _atType;
  }

  public Event label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public Event eventMeasurementUnit(List<MeasurementUnit> eventMeasurementUnit) {
    this.eventMeasurementUnit = eventMeasurementUnit;
    return this;
  }

  public Event addEventMeasurementUnitItem(MeasurementUnit eventMeasurementUnitItem) {
    if (this.eventMeasurementUnit == null) {
      this.eventMeasurementUnit = new ArrayList<MeasurementUnit>();
    }
    this.eventMeasurementUnit.add(eventMeasurementUnitItem);
    return this;
  }

   /**
   * Get eventMeasurementUnit
   * @return eventMeasurementUnit
  **/
  @Schema(description = "")
  public List<MeasurementUnit> getEventMeasurementUnit() {
    return eventMeasurementUnit;
  }

  public void setEventMeasurementUnit(List<MeasurementUnit> eventMeasurementUnit) {
    this.eventMeasurementUnit = eventMeasurementUnit;
  }

  public Event eventQuantityKind(List<QuantityKind> eventQuantityKind) {
    this.eventQuantityKind = eventQuantityKind;
    return this;
  }

  public Event addEventQuantityKindItem(QuantityKind eventQuantityKindItem) {
    if (this.eventQuantityKind == null) {
      this.eventQuantityKind = new ArrayList<QuantityKind>();
    }
    this.eventQuantityKind.add(eventQuantityKindItem);
    return this;
  }

   /**
   * Get eventQuantityKind
   * @return eventQuantityKind
  **/
  @Schema(description = "")
  public List<QuantityKind> getEventQuantityKind() {
    return eventQuantityKind;
  }

  public void setEventQuantityKind(List<QuantityKind> eventQuantityKind) {
    this.eventQuantityKind = eventQuantityKind;
  }

  public Event hasCreatedTime(List<OffsetDateTime> hasCreatedTime) {
    this.hasCreatedTime = hasCreatedTime;
    return this;
  }

  public Event addHasCreatedTimeItem(OffsetDateTime hasCreatedTimeItem) {
    if (this.hasCreatedTime == null) {
      this.hasCreatedTime = new ArrayList<OffsetDateTime>();
    }
    this.hasCreatedTime.add(hasCreatedTimeItem);
    return this;
  }

   /**
   * Get hasCreatedTime
   * @return hasCreatedTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasCreatedTime() {
    return hasCreatedTime;
  }

  public void setHasCreatedTime(List<OffsetDateTime> hasCreatedTime) {
    this.hasCreatedTime = hasCreatedTime;
  }

  public Event hasDeletedTime(List<OffsetDateTime> hasDeletedTime) {
    this.hasDeletedTime = hasDeletedTime;
    return this;
  }

  public Event addHasDeletedTimeItem(OffsetDateTime hasDeletedTimeItem) {
    if (this.hasDeletedTime == null) {
      this.hasDeletedTime = new ArrayList<OffsetDateTime>();
    }
    this.hasDeletedTime.add(hasDeletedTimeItem);
    return this;
  }

   /**
   * Get hasDeletedTime
   * @return hasDeletedTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasDeletedTime() {
    return hasDeletedTime;
  }

  public void setHasDeletedTime(List<OffsetDateTime> hasDeletedTime) {
    this.hasDeletedTime = hasDeletedTime;
  }

  public Event hasDuration(List<Double> hasDuration) {
    this.hasDuration = hasDuration;
    return this;
  }

  public Event addHasDurationItem(Double hasDurationItem) {
    if (this.hasDuration == null) {
      this.hasDuration = new ArrayList<Double>();
    }
    this.hasDuration.add(hasDurationItem);
    return this;
  }

   /**
   * Get hasDuration
   * @return hasDuration
  **/
  @Schema(description = "")
  public List<Double> getHasDuration() {
    return hasDuration;
  }

  public void setHasDuration(List<Double> hasDuration) {
    this.hasDuration = hasDuration;
  }

  public Event hasObservationTime(List<OffsetDateTime> hasObservationTime) {
    this.hasObservationTime = hasObservationTime;
    return this;
  }

  public Event addHasObservationTimeItem(OffsetDateTime hasObservationTimeItem) {
    if (this.hasObservationTime == null) {
      this.hasObservationTime = new ArrayList<OffsetDateTime>();
    }
    this.hasObservationTime.add(hasObservationTimeItem);
    return this;
  }

   /**
   * Get hasObservationTime
   * @return hasObservationTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasObservationTime() {
    return hasObservationTime;
  }

  public void setHasObservationTime(List<OffsetDateTime> hasObservationTime) {
    this.hasObservationTime = hasObservationTime;
  }

  public Event hasPointInTime(List<OffsetDateTime> hasPointInTime) {
    this.hasPointInTime = hasPointInTime;
    return this;
  }

  public Event addHasPointInTimeItem(OffsetDateTime hasPointInTimeItem) {
    if (this.hasPointInTime == null) {
      this.hasPointInTime = new ArrayList<OffsetDateTime>();
    }
    this.hasPointInTime.add(hasPointInTimeItem);
    return this;
  }

   /**
   * Get hasPointInTime
   * @return hasPointInTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasPointInTime() {
    return hasPointInTime;
  }

  public void setHasPointInTime(List<OffsetDateTime> hasPointInTime) {
    this.hasPointInTime = hasPointInTime;
  }

  public Event hasReadTime(List<OffsetDateTime> hasReadTime) {
    this.hasReadTime = hasReadTime;
    return this;
  }

  public Event addHasReadTimeItem(OffsetDateTime hasReadTimeItem) {
    if (this.hasReadTime == null) {
      this.hasReadTime = new ArrayList<OffsetDateTime>();
    }
    this.hasReadTime.add(hasReadTimeItem);
    return this;
  }

   /**
   * Get hasReadTime
   * @return hasReadTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasReadTime() {
    return hasReadTime;
  }

  public void setHasReadTime(List<OffsetDateTime> hasReadTime) {
    this.hasReadTime = hasReadTime;
  }

  public Event hasStartTime(List<OffsetDateTime> hasStartTime) {
    this.hasStartTime = hasStartTime;
    return this;
  }

  public Event addHasStartTimeItem(OffsetDateTime hasStartTimeItem) {
    if (this.hasStartTime == null) {
      this.hasStartTime = new ArrayList<OffsetDateTime>();
    }
    this.hasStartTime.add(hasStartTimeItem);
    return this;
  }

   /**
   * Get hasStartTime
   * @return hasStartTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasStartTime() {
    return hasStartTime;
  }

  public void setHasStartTime(List<OffsetDateTime> hasStartTime) {
    this.hasStartTime = hasStartTime;
  }

  public Event hasStopTime(List<OffsetDateTime> hasStopTime) {
    this.hasStopTime = hasStopTime;
    return this;
  }

  public Event addHasStopTimeItem(OffsetDateTime hasStopTimeItem) {
    if (this.hasStopTime == null) {
      this.hasStopTime = new ArrayList<OffsetDateTime>();
    }
    this.hasStopTime.add(hasStopTimeItem);
    return this;
  }

   /**
   * Get hasStopTime
   * @return hasStopTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasStopTime() {
    return hasStopTime;
  }

  public void setHasStopTime(List<OffsetDateTime> hasStopTime) {
    this.hasStopTime = hasStopTime;
  }

  public Event hasUpdatedTime(List<OffsetDateTime> hasUpdatedTime) {
    this.hasUpdatedTime = hasUpdatedTime;
    return this;
  }

  public Event addHasUpdatedTimeItem(OffsetDateTime hasUpdatedTimeItem) {
    if (this.hasUpdatedTime == null) {
      this.hasUpdatedTime = new ArrayList<OffsetDateTime>();
    }
    this.hasUpdatedTime.add(hasUpdatedTimeItem);
    return this;
  }

   /**
   * Get hasUpdatedTime
   * @return hasUpdatedTime
  **/
  @Schema(description = "")
  public List<OffsetDateTime> getHasUpdatedTime() {
    return hasUpdatedTime;
  }

  public void setHasUpdatedTime(List<OffsetDateTime> hasUpdatedTime) {
    this.hasUpdatedTime = hasUpdatedTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this._atContext, event._atContext) &&
        Objects.equals(this._atId, event._atId) &&
        Objects.equals(this._atType, event._atType) &&
        Objects.equals(this.label, event.label) &&
        Objects.equals(this.eventMeasurementUnit, event.eventMeasurementUnit) &&
        Objects.equals(this.eventQuantityKind, event.eventQuantityKind) &&
        Objects.equals(this.hasCreatedTime, event.hasCreatedTime) &&
        Objects.equals(this.hasDeletedTime, event.hasDeletedTime) &&
        Objects.equals(this.hasDuration, event.hasDuration) &&
        Objects.equals(this.hasObservationTime, event.hasObservationTime) &&
        Objects.equals(this.hasPointInTime, event.hasPointInTime) &&
        Objects.equals(this.hasReadTime, event.hasReadTime) &&
        Objects.equals(this.hasStartTime, event.hasStartTime) &&
        Objects.equals(this.hasStopTime, event.hasStopTime) &&
        Objects.equals(this.hasUpdatedTime, event.hasUpdatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_atContext, _atId, _atType, label, eventMeasurementUnit, eventQuantityKind, hasCreatedTime, hasDeletedTime, hasDuration, hasObservationTime, hasPointInTime, hasReadTime, hasStartTime, hasStopTime, hasUpdatedTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    
    sb.append("    _atContext: ").append(toIndentedString(_atContext)).append("\n");
    sb.append("    _atId: ").append(toIndentedString(_atId)).append("\n");
    sb.append("    _atType: ").append(toIndentedString(_atType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    eventMeasurementUnit: ").append(toIndentedString(eventMeasurementUnit)).append("\n");
    sb.append("    eventQuantityKind: ").append(toIndentedString(eventQuantityKind)).append("\n");
    sb.append("    hasCreatedTime: ").append(toIndentedString(hasCreatedTime)).append("\n");
    sb.append("    hasDeletedTime: ").append(toIndentedString(hasDeletedTime)).append("\n");
    sb.append("    hasDuration: ").append(toIndentedString(hasDuration)).append("\n");
    sb.append("    hasObservationTime: ").append(toIndentedString(hasObservationTime)).append("\n");
    sb.append("    hasPointInTime: ").append(toIndentedString(hasPointInTime)).append("\n");
    sb.append("    hasReadTime: ").append(toIndentedString(hasReadTime)).append("\n");
    sb.append("    hasStartTime: ").append(toIndentedString(hasStartTime)).append("\n");
    sb.append("    hasStopTime: ").append(toIndentedString(hasStopTime)).append("\n");
    sb.append("    hasUpdatedTime: ").append(toIndentedString(hasUpdatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
