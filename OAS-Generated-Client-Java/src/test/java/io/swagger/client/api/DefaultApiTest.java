/*
 * RealEstateCore Core Module
 * The documentation below is automatically extracted from an <rdfs:comment> annotation on the ontology RealEstateCore Core Module:<br/><br/>*The REC core module collects the top-level classes and properties that span over or are reused within multiple REC modules.<br/><br/>Note that this module reuses certain classes, properties, and named individuals from other vocabularies, e.g., GeoSPARQL; the copyright conditions on those reused entities are stated in their respective rdfs:comments annotations.*
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Agent;
import io.swagger.client.model.Building;
import io.swagger.client.model.BuildingComponent;
import io.swagger.client.model.Device;
import io.swagger.client.model.Event;
import io.swagger.client.model.GeoReferenceOrigo;
import io.swagger.client.model.Geometry;
import io.swagger.client.model.Land;
import io.swagger.client.model.MeasurementUnit;
import io.swagger.client.model.QuantityKind;
import io.swagger.client.model.RealEstate;
import io.swagger.client.model.RealEstateComponent;
import io.swagger.client.model.Room;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get all &#x27;Agent&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void agentGetTest() throws ApiException {
        Agent response = api.agentGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;BuildingComponent&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildingComponentGetTest() throws ApiException {
        BuildingComponent response = api.buildingComponentGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;Building&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buildingGetTest() throws ApiException {
        Building response = api.buildingGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;Device&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceGetTest() throws ApiException {
        Device response = api.deviceGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;Event&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventGetTest() throws ApiException {
        Event response = api.eventGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;GeoReferenceOrigo&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void geoReferenceOrigoGetTest() throws ApiException {
        GeoReferenceOrigo response = api.geoReferenceOrigoGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;Geometry&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void geometryGetTest() throws ApiException {
        Geometry response = api.geometryGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;Land&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void landGetTest() throws ApiException {
        Land response = api.landGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;MeasurementUnit&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void measurementUnitGetTest() throws ApiException {
        MeasurementUnit response = api.measurementUnitGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;QuantityKind&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quantityKindGetTest() throws ApiException {
        QuantityKind response = api.quantityKindGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;RealEstateComponent&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void realEstateComponentGetTest() throws ApiException {
        RealEstateComponent response = api.realEstateComponentGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;RealEstate&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void realEstateGetTest() throws ApiException {
        RealEstate response = api.realEstateGet();

        // TODO: test validations
    }
    /**
     * Get all &#x27;Room&#x27; objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void roomGetTest() throws ApiException {
        Room response = api.roomGet();

        // TODO: test validations
    }
}
